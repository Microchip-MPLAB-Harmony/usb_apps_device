{"0": {
    "doc": "License",
    "title": "License",
    "content": "MICROCHIP SOFTWARE IS PROVIDED SOLELY TO ASSIST YOU IN DEVELOPING PRODUCTS AND SYSTEMS THAT USE MICROCHIP PRODUCTS. DOWNLOAD AND/OR USE OF THE SOFTWARE REQUIRES THAT YOU ACCEPT THIS SOFTWARE LICENSE AGREEMENT. IF YOU DO NOT WISH TO ACCEPT THESE TERMS, DO NOT DOWNLOAD OR USE ANY OF THE SOFTWARE. DOWNLOADING OR USING THE SOFTWARE CONTITUTES YOUR ACCEPTANCE OF THIS SOFTWARE LICENSE AGREEMENT. SOFTWARE LICENSE AGREEMENT . This Software License Agreement (\"Agreement\") is an agreement between you (if licensing as an individual) or the entity you represent (if licensing as a business) (\"you\" or \"Licensee\") and Microchip Technology Incorporated, a Delaware corporation, with a place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its affiliates including Microchip Technology Ireland Limited, a company organized under the laws of Ireland, with a principal address at Ground Floor, Block W., East Point Business Park, Dublin, Ireland 3 (collectively, \"Microchip\") for the Microchip MPLAB Harmony Integrated Software Framework and documentation included in the download or otherwise provided by Microchip to Licensee (collectively, the \"Software\"). 1. Use. Subject to the terms of this Agreement, Microchip hereby grants Licensee a limited, revocable, non-exclusive, non-transferable, worldwide license to (a) use the Software, and (b) modify the Software provided in source code form, if any (and use and copy modifications of such Software made by Licensee), provided that in each case (with respect to clauses (a) and (b)) Licensee solely uses the Software with Microchip Products, Licensee Products, or other products agreed to by Microchip in writing. Licensee has no right to (i) substitute third party products for Microchip Products, or (ii) except as expressly provided in Section 2 below, sublicense its rights under this Agreement or otherwise disclose or distribute the Software to any third party. Licensee may make a reasonable number of copies of the Software solely as necessary to exercise its license rights in this Section 1. Licensee will not remove or alter any copyright, trademark, or other proprietary notices contained on or in the Software or any copies. “Microchip Products” means those Microchip devices purchased from Microchip or one of its authorized distributors that are identified in the Software, or if not identified in the Software, then such Microchip devices that are consistent with the purpose of the Software, including but not limited to Microchip 32-bit microcontroller and microprocessor devices and the like. “Licensee Products” means products manufactured by or for Licensee that use or incorporate Microchip Products. 2. Subcontractors. If Licensee wishes for its subcontractor to obtain and use the Software in order to provide design, manufacturing, or other services to Licensee: (a) such subcontractor may (i) download and agree to the terms of this Agreement or (ii) contact Microchip directly for a copy of this Agreement and agree to its terms; or (b) Licensee may sublicense the rights described in Section 1 directly to its subcontractor, provided that (i) such subcontractor agrees in writing to the terms of this Agreement � a copy of which will be provided to Microchip upon request, and (ii) Licensee is liable for such subcontractor's acts and omissions. 3. Third Party Software. (a) Third Party Materials. Licensee agrees to comply with third party license terms applicable to Third Party Materials, if any. Microchip will not be held responsible for Licensee's failure to comply with such terms. Microchip has no obligation to provide support or maintenance for Third Party Materials. \"Third Party Materials\" means the third party software, systems, tools, or specifications (including those of a standards setting organization) referenced in, bundled with, or included in the Software. (b) Open Source Components. Notwithstanding the license grant in Section 1 above, Licensee acknowledges that the Software may include Open Source Components. To the extent required by the licenses covering Open Source Components, the terms of such license apply in lieu of the terms of this Agreement. To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, those restrictions will not apply to the Open Source Component. \"Open Source Components\" means components of the Software that are subject to the terms of an Open Source License. \"Open Source License\" means any software license approved as an open source license by the Open Source Initiative or any substantially similar license, including without limitation any license that, as a condition of distribution of the software licensed under such license, requires that the distributor make the software available in source code format. 4. Licensee Obligations. (a) Restrictions. Except as expressly permitted by this Agreement, Licensee agrees that it will not (i) modify or alter the Software or a Microchip Product; (ii) adapt, translate, decompile, reverse engineer, disassemble the Software provided in object code form, any Microchip Product, or any samples or prototypes provided by Microchip, or create derivative works thereof; or (iii) use the Software with any software or other materials that are subject to licenses or restrictions (e.g., Open Source Licenses) that, when combined with the Software, would require Microchip to disclose, license, distribute, or otherwise make all or any part of such Software available to anyone. (b) Indemnity. Licensee will indemnify (and, at Microchip's election, defend) Microchip from and against any and all claims, costs, damages, expenses (including reasonable attorneys' fees), liabilities, and losses, arising out of or related to: (i) Licensee's modification, disclosure, or distribution of the Software or Third Party Materials; (ii) the use, sale, or distribution of Licensee Products; and (iii) an allegation that Licensee Products or Licensee's modification of the Software infringe third party intellectual property rights. (c) Licensee Products. Licensee understands and agrees that Licensee remains responsible for using its independent analysis, evaluation, and judgment in designing Licensee Products and systems and has full and exclusive responsibility to assure the safety of its products and compliance of its products (and of all Microchip Products used in or for such Licensee Products) with applicable laws and requirements. 5. Confidentiality. (a) Licensee agrees that the Software, underlying inventions, algorithms, know-how, and ideas relating to the Software, and any other non-public business or technical information disclosed by Microchip to Licensee are confidential and proprietary information, including information derived therefrom, belonging to Microchip and its licensors (collectively, \"Confidential Information\"). Licensee will use Confidential Information only to exercise its rights and perform its obligations under this Agreement and will take all reasonable measures to protect the secrecy of and avoid unauthorized access, disclosure, and use of Confidential Information. Such measures include, but are not limited to, the highest degree of care that it uses to protect its own information of a similar nature, but not less than reasonable care. Licensee will only disclose Confidential Information to its employees, subcontractors, consultants, auditors and representatives (collectively \"Representatives\") who have a need to know such information and who have use and confidentiality obligations to Licensee at least as restrictive as those set forth in this Agreement. Licensee is responsible for disclosure or misuse of Confidential Information by its Representatives. Use of Confidential Information for personal gain, for the benefit of a third party or to compete with Microchip, whether directly or indirectly, is a breach of this Agreement. Licensee will notify Microchip in writing of any actual or suspected misuse, misappropriation, or unauthorized disclosure of Confidential Information that comes to Licensee's attention. Confidential Information will not include information that: (i) is or becomes publicly available without breach of this Agreement; (ii) is known or becomes known to Licensee from a source other than Microchip without restriction and without breach of this Agreement or violation of Microchip's rights, as demonstrated by credible evidence in existence at the time of disclosure; (iii) is independently developed by Licensee without use of or reference to the Confidential Information, as demonstrated by credible evidence in existence at the time of independent development; or (iv) is disclosed generally to third parties by Microchip without restrictions similar to those contained in this Agreement. Licensee may disclose Confidential Information to the extent required under law, rule, or regulation (including those of any national securities exchange), by subpoena, civil investigative demand, or similar process, or by a court or administrative agency (each a \"Requirement\"'), provided, that to the extent permitted by applicable law, Licensee will provide prompt notice of such Requirement to Microchip to enable Microchip to seek a protective order or otherwise prevent or restrict such disclosure. (b) Return of Materials. Upon Microchip's request and direction, Licensee will promptly return or destroy the Confidential Information, including any physical information or materials provided to Licensee (together with any copies, excerpts, syntheses, CD ROMS, diskettes, etc.), and, in the case of information derived therefrom, provide written certification that all the Confidential Information has been expunged from any such materials or that all such materials have been destroyed. Further, if Licensee or its affiliates become competitors of Microchip, and Microchip notifies Licensee in writing of its status as a competitor in a given market, then Licensee will promptly engage in the return and certification process described above in this Section 5(b). 6. Ownership and Retention of Rights. All rights, title, and interest (including all intellectual property rights) in and to the Software, including any derivative works of the Software and any incremental modifications to the Software whether made by or for Licensee or Microchip (collectively, \"Microchip Property\"), are and will remain the sole and exclusive property of Microchip, whether such Microchip Property is separate or combined with any other products. Licensee, on behalf of itself and its affiliates, agrees to, and does hereby, assign to Microchip or its designee all right, title and interest (including all intellectual property rights) in and to derivative works of and any incremental modifications to the Software. Licensee will take (and will cause its affiliates, their subcontractors, and all related individuals to take) all action as may be reasonably necessary, proper or advisable to perfect and secure the ownership, licenses, intellectual property and other rights of or to Microchip as set forth in this Agreement. All rights not expressly granted under this Agreement are reserved to Microchip and its licensors and suppliers, and there are no implied rights. Licensee retains all right, title, and interest in and to any technology independently developed by Licensee not derived, directly or indirectly, from the Microchip Property or any other item of tangible property provided to Licensee by Microchip hereunder. 7. Termination. This Agreement will start once accepted by Licensee and continue unless and until terminated as provided in this Agreement. This Agreement automatically terminates immediately if Licensee violates the restrictions set forth in Sections 1, 2 or 4(a). Microchip may terminate this Agreement immediately upon notice if (a) Licensee or its affiliates become competitors of Microchip, or (b) Licensee breaches any other term of this Agreement and does not cure such breach within 30 days after receipt of written notice of such breach from Microchip. Upon termination of this Agreement, (i) the license grants in Sections 1 and 2(b) terminate, and (ii) Licensee will return to Microchip or destroy (and certify the destruction of) all Microchip Property and Confidential Information in its possession or under its control, and all copies thereof. The following sections survive termination of this Agreement: 3, 4, 5, 6, 7, 8, 9, 10, 11 and 12. 8. Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (\"Dangerous Applications\"). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. 9. EU Consumers � Applicable Terms. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, THE FOLLOWING PROVISIONS APPLY INSTEAD OF SECTIONS 9 AND 10 BELOW: Microchip and its licensors will not be liable (a) for any loss suffered by Licensee in connection with the Software where such loss was not reasonably foreseeable when the Software was first downloaded by Licensee, even if such loss was the result of negligence or the failure of Microchip and its licensors to comply with this Agreement; or (b) irrespective of the basis of claim, for any loss of revenue, profit or other business or economic loss suffered. Some Software is made available to Licensee free of charge, and Licensee may at any time download further copies without charge to replace the Software initially downloaded and others may require a fee to be downloaded, or to download any further copies. In all circumstances, to the extent liability may lawfully be limited or excluded, the cumulative liability of Microchip and its licensors will not exceed USD$1,000 (or equivalent sum in the currency of the country in which Licensee resides). However, none of the foregoing limits or excludes any liability for death or personal injury arising from negligence, or for fraud, fraudulent misrepresentation or any other cause that by law cannot be excluded and limited. 10. Warranty Disclaimers. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, THE SOFTWARE IS LICENSED ON AN \"AS-IS\" BASIS. MICROCHIP MAKES NO WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER EXPRESS, IMPLIED, STAUTORY OR OTHERWISE, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR NON-INFRINGEMENT AND ANY WARRANTIES THAT MAY ARISE FROM USAGE OF TRADE OR COURSE OF DEALING. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. TECHNICAL ASSISTANCE, IF PROVIDED, WILL NOT EXPAND THESE WARRANTIES. IF CUSTOMER IS A CONSUMER, THE ABOVE WILL NOT ACT TO EXCLUDE YOUR STATUTORY RIGHTS. 11. Limited Liability. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, IN NO EVENT WILL MICROCHIP BE LIABLE, WHETHER IN CONTRACT, WARRANTY, REPRESENTATION, TORT, STRICT LIABILITY, INDEMNITY, CONTRIBUTION OR OTHERWISE, FOR ANY INDIRECT, SPECIAL, PUNITIVE, EXEMPLARY, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER, HOWEVER CAUSED, OR ANY LOSS OF PRODUCTION, COST OF PROCUREMENT OF SUBSTITUTE PRODUCTS OR SERVICES, ANY LOSS OF PROFITS, LOSS OF BUSINESS, LOSS OF USE OR LOSS OF DATA, OR INTERRUPTION OF BUSINESS ARISING OUT OF THIS AGREEMENT, HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS, AND NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY. MICROCHIP'S TOTAL AGGREGATE LIABILITY UNDER THIS AGREEMENT WILL NOT EXCEED USD$1,000. 12. General. (a) This Agreement will be governed by and construed in accordance with the laws of the State of Arizona and the United States, without regard to conflicts of law provisions. The parties hereby irrevocably consent to the exclusive personal jurisdiction and venue of the state and federal courts in Maricopa County, Arizona for any dispute relating to this Agreement. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, this Agreement is subject to the laws of the country in which the Software is downloaded, and, to the extent so mandated by such laws, subject to the jurisdiction of the courts of that country. The parties expressly disclaim the applicability of the United Nations Convention on Contracts for the International Sale of Goods in connection with this Agreement. (b) Unless the parties have a mutually executed agreement relating to the licensing of this Software by Microchip to Licensee (\"Signed Agreement\"), this Agreement constitutes the entire agreement between the parties with respect to the Software, and supersedes and replaces prior or contemporaneous written or verbal agreements or communications between the parties regarding the Software, including any purchase orders. If the parties have a Signed Agreement, this Agreement does not supersede or replace that Signed Agreement. This Agreement will not be modified except by a written agreement signed by an authorized representative of Microchip. If any provision of this Agreement is held by a court of competent jurisdiction to be illegal, invalid, or unenforceable, that provision will be limited or eliminated to the minimum extent necessary so that this Agreement will otherwise remain in full force and effect and enforceable. No waiver of any breach of any provision of this Agreement constitutes a waiver of any prior, concurrent, or subsequent breach of the same or any other provisions of this Agreement, and no waiver will be effective unless made in writing and signed by an authorized representative of the waiving party. (c) Licensee agrees to comply with all import and export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (d) This Agreement will bind and inure to the benefit of each party's permitted successors and assigns. Licensee may not assign this Agreement in whole or in part, whether by law or otherwise, without Microchip's prior written consent. Any merger, consolidation, amalgamation, reorganization, transfer of all or substantially all assets or other change in control or majority ownership (\"Change of Control\") is considered an assignment for the purpose of this Section. Any attempt to assign this Agreement without such consent will be null and void. However, Microchip may assign this Agreement to an affiliate, or to another entity in the event of a Change of Control. (e) Licensee acknowledges its breach of any confidentiality or proprietary rights provision of this Agreement would cause Microchip irreparable damage, for which the award of damages would not be an adequate remedy. Licensee, therefore, agrees if Microchip alleges that Licensee has breached or violated any such provisions then Microchip may seek equitable relief, in addition to all other remedies at law or in equity. (f) Authorized representatives of Microchip shall have the right to reasonably inspect Licensee's premises and to audit Licensee's records and inventory of Licensee Products, whether located on Licensee's premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee's adherence to the terms of this Agreement. (g) Consistent with 48 C.F.R. �12.212 or 48 C.F.R. �227.7202-1 through 227.7202-4, as applicable, the Software is being licensed to U.S. Government end users (i) only as Commercial Items, and (ii) with only those rights as are granted to all other end users pursuant to the terms and conditions of the applicable Microchip licenses. To the extent the Software (or a portion thereof) qualifies as �technical data' as such term is defined in 48 C.F.R. �252.227-7015(a)(5), then its use, duplication, or disclosure by the U.S. Government is subject to the restrictions set forth in subparagraphs (a) through (e) of the Rights in Technical Data clause at 48 C.F.R. �252.227-7015. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199. Questions about this Agreement should be sent to: Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA. ATTN: Marketing. v.3.3.2021 . ",
    "url": "http://localhost:4000/usb_apps_device/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "CDC COM Port Single Example",
    "title": "CDC COM Port Single Example (cdc_com_port_single)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support USB Communication Device Class. It demonstrates two-way communication between the USB device and the USB Host PC. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_single/readme.html#cdc-com-port-single-example-cdc_com_port_single",
    "relUrl": "/apps/cdc_com_port_single/readme.html#cdc-com-port-single-example-cdc_com_port_single"
  },"2": {
    "doc": "CDC COM Port Single Example",
    "title": "Description",
    "content": "This application creates a USB CDC Device that enumerates as a single COM port on the USB host PC. The COM port can be opened using any of the terminal applications. To demonstrate two-way communication, when a character is typed on the terminal window, it is echoed back by the USB device. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_single/readme.html#description",
    "relUrl": "/apps/cdc_com_port_single/readme.html#description"
  },"3": {
    "doc": "CDC COM Port Single Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/cdc_com_port_single. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32cm_le00_curiosity_pro.X | MPLABX | PIC32CM5164LE00100 | PIC32CM Lx Curiosity Pro Board | . | pic32mm_usb_curiosity.X | MPLABX | PIC32MM0256GPM064 | PIC32MM USB Curiosity Development Board | . | pic32mk_gp_db.X | MPLABX | PIC32MK1024GPE100 | PIC32MK General Purpose (GP) Development Board | . | pic32mk_gp_db_freertos.X | MPLABX | PIC32MK1024GPE100 | PIC32MK General Purpose (GP) Development Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mx470_curiosity_freertos.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mz_das_sk.X | MPLABX | PIC32MZ2064DAS169 | PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit | . | pic32mz_ef_curiosity_2.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32mz_ef_sk.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | pic32mz_ef_sk_freertos.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | pic32mz_w1_curiosity.X | MPLABX | PIC32MZ1025W104132 | Curiosity PIC32MZ W1 Development Board | . | sam_9x60_ek.X | MPLABX | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_freertos.X | MPLABX | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_a5d2_xult.X | MPLABX | ATSAMA5D27C | SAMA5D2 Xplained Ultra Board | . | sam_a5d2_xult_freertos.X | MPLABX | ATSAMA5D27C | SAMA5D2 Xplained Ultra Board | . | sam_a5d2_xult_iar.IAR | IAR | ATSAMA5D27C | SAMA5D2 Xplained Ultra Board | . | sam_a5d27_som1_ek.X | MPLABX | ATSAMA5D27C | SAMA5D27 SOM1 Kit1 | . | sam_a5d27_som1_ek_freertos.X | MPLABX | ATSAMA5D27C | SAMA5D27 SOM1 Kit1 | . | sam_a5d27_wlsom1_ek1.X | MPLABX | ATSAMA5D27C | ATSAMA5D27 WLSOM1 EK1 | . | sam_a5d27_wlsom1_ek1_freertos.X | MPLABX | ATSAMA5D27C | ATSAMA5D27 WLSOM1 EK1 | . | sam_a7g5_ek.X | MPLABX | SAMA7G54 | SAMA7G5 EK Board | . | sam_d11_xpro.X | MPLABX | ATSAMD11D14A | SAMD11 Xplained Pro Board | . | sam_d11_xpro_iar.IAR | IAR | ATSAMD11D14A | SAMD11 Xplained Pro Board | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAMD21 Xplained Pro Board | . | sam_d21_xpro_iar.IAR | IAR | ATSAMD21J18A | SAMD21 Xplained Pro Board | . | sam_da1_xpro.X | MPLABX | ATSAMDA1J16B | SAMDA1 Xplained Pro Board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro Board | . | sam_e54_xpro_freertos.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro Board | . | sam_e54_xpro_iar.IAR | IAR | ATSAME54P20A | SAME54 Xplained Pro Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra Board | . | sam_e70_xult_iar.IAR | IAR | ATSAME70Q21B | SAME70 Xplained Ultra Board | . | sam_g55_xpro.X | MPLABX | ATSAMG55J19 | SAMG55 Xplained Pro Board | . | sam_l21_xpro.X | MPLABX | ATSAML21J18B | SAML21 Xplained Pro Board | . | sam_l22_xpro.X | MPLABX | ATSAML22N18A | SAML22 Xplained Pro Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_single/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/cdc_com_port_single/readme.html#downloading-and-building-the-application"
  },"4": {
    "doc": "CDC COM Port Single Example",
    "title": " Configuring the Hardware",
    "content": "SAMD11 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAMD21 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAME54 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAME70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . SAMG55 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAML21 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAML22 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAMDA1 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . Curiosity Pro PIC32CM LE00 Development Board . | Use the USB micro-A/B “TARGET USB” connector (D200) to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . PIC32MK General Purpose (GP) Development Board . | Jumper J28 must be removed. | Use the USB micro-B port J13 (which is located on the bottom side of the board) to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . Curiosity PIC32MX470 Development Board . | Use the USB micro-B port J12 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit . | Use the micro-A/B port J6 (which is located on the bottom side of the board) to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . | Use the micro-A/B port J4 (which is located on the bottom side of the board) to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . Curiosity PIC32MZ W1 Development Board . | Use the USB micro-B port J204 to connect the USB Device to the USB Host PC. | The LED D202 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW200 to trigger communication from the USB Device to the USB Host. | . PIC32MM USB Curiosity Development Board . | Use the micro-B USB connector USB2 on the board to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . SAM9X60-EK Evaluation Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC connector J4 on the board. | Reset the board by pressing the Push Button SW3. | . | Jumpers J20, J21, and J13 must be open. | Jumper J2 and J3 must be shorted. | Connect the USB Micro-B port J22 on board to the computer using a micro USB cable (to enable the debug com port). | Connect the USB Micro-B Connector (J7) on the board to the computer using a micro USB cable. | LED D1 indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. Note: Reset push button on SAM9X60 EK is labeled as SW3 . | . SAMA5D2 Xplained Ultra Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC1 slot on the board. | Reset the board by pressing the Push Button BP3. | . | Short jumper JP2(DEBUG_DIS). | Connect the EDBG USB Micro-B port J14 on the board to the computer using a micro USB cable. | Use the “A5-USB-A” connector (J23 - Micro A/B connector) on the board to connect the USB device to the USB Host. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press PB_USER Switch to trigger communication from the USB Device to the USB Host. | . SAMA5D27 SOM1 Kit1 . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC0 slot (J12) on the board. | Reset the board by pressing the Push Button PB1. | . | Connect the Debug USB port (J10) on the board to the computer using a micro USB cable. | Connect the USB Micro-B Connector (J17) on the board to the computer using a micro USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the pushbutton PB4 to trigger communication from the USB Device to the USB Host. | . ATSAMA5D27-WLSOM1 Evaluation Kit . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC0 Card Connector (J9) on the board. | Reset the board by pressing the Reset Button (SW2) | . | Connect the USB-A MicroAB connector (J10) on the board to the computer using a micro USB cable. | Press the “START_SOM” button to activate board start-up. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the pushbutton SW4 to trigger communication from the USB Device to the USB Host. | . SAMA7G5-EK Evaluation Kit . | Powered the board with an external power supply (J1) or power supply the board by connecting J7 to the computer using a micro USB cable. | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SD Card Connector (J4) on the board. | Reset the board by pressing the Reset Button (nRST) | . | Press the “nSTART” button to activate board start-up. | Connect the USB MicroAB connector (J7) to the computer using an USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the USER BUTTON SW1 to trigger communication from the USB Device to the USB Host. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_single/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/cdc_com_port_single/readme.html#-configuring-the-hardware"
  },"5": {
    "doc": "CDC COM Port Single Example",
    "title": "Running the Application",
    "content": "This demonstration creates a USB device that enumerates as a serial (COM) port on the host. Do the following to run this demonstration: . | Open the project with appropriate IDE. Compile the project and program the target device. | Attach the device to the host. If the host is a personal computer and this is the first time you have plugged this device into the computer you may be prompted for a .inf file. | Select the “Install from a list or specific location (Advanced)” option. Navigate to the driver path available in the repo - ..\\usb_apps_device\\apps\\cdc_com_port_single\\inf. Note: . | To specifically select the driver, open the Device Manager and expand the Ports (COM &amp; LPT) tab, and right click on Update Driver Software. | The LEDs on the demonstration board will indicate the USB state of the device. Refer to the Configuring the Hardware section for the selected target hardware. | . | Once the device is successfully installed, open up a terminal program, such as HyperTerminal and select the appropriate COM port. Set the serial port settings as follows: . | Baud : 9600 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Once connected to the device, there are two ways to run this example project: . | Typing a key in the terminal window will result in the attached device echoing the next letter. Therefore, if the letter ‘b’ is pressed, the device will echo ‘c’. | If the push button is pressed, the device will echo “PUSH BUTTON PRESSED” to the terminal window. Refer to Configuring the Hardware section to identify the switch to be pressed for the selected target board. | . | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_single/readme.html#running-the-application",
    "relUrl": "/apps/cdc_com_port_single/readme.html#running-the-application"
  },"6": {
    "doc": "CDC COM Port Single Example",
    "title": "CDC COM Port Single Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_single/readme.html",
    "relUrl": "/apps/cdc_com_port_single/readme.html"
  },"7": {
    "doc": "CDC MSD Basic Example",
    "title": "CDC MSD Basic Example (cdc_msd_basic)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support Composite USB Device. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_basic/readme.html#cdc-msd-basic-example-cdc_msd_basic",
    "relUrl": "/apps/cdc_msd_basic/readme.html#cdc-msd-basic-example-cdc_msd_basic"
  },"8": {
    "doc": "CDC MSD Basic Example",
    "title": "Description",
    "content": "This application creates a USB CDC Device that enumerates as a COM port and Flash Drive simultaneously. The COM port can be opened using any of the terminal applications and to demonstrate two-way communication, a character typed on the terminal window is echoed back by the USB device. Flash drive acts similar to any Mass Storage Class device where the NVM is used as storage media. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_basic/readme.html#description",
    "relUrl": "/apps/cdc_msd_basic/readme.html#description"
  },"9": {
    "doc": "CDC MSD Basic Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/cdc_msd_basic. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_basic/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/cdc_msd_basic/readme.html#downloading-and-building-the-application"
  },"10": {
    "doc": "CDC MSD Basic Example",
    "title": " Configuring the Hardware",
    "content": "SAME70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . Curiosity PIC32MX470 Development Board . | Use the USB micro-B port J12 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_basic/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/cdc_msd_basic/readme.html#-configuring-the-hardware"
  },"11": {
    "doc": "CDC MSD Basic Example",
    "title": "Running the Application",
    "content": "This demonstration application creates a composite USB Device that works simultaneously as a CDC and as a MSD device. This application combines the functionality of the cdc_com_port_single and msd_basic demonstration applications into one device. Open the project with appropriate IDE. Compile the project and program the target device. Running the CDC Device . The CDC Device application is same as cdc_com_port_single demo. Refer to local documentation from usb_apps_device/apps/cdc_com_port_single. The documentation is also available in the github path usb_apps_device/apps/cdc_com_port_single. Running the MSD Basic Device . The MSD Basic Device application is same as msd_basic demo. Refer to local documentation from usb_apps_device/apps/msd_basic. The documentation is also available in the github path usb_apps_device/apps/msd_basic. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_basic/readme.html#running-the-application",
    "relUrl": "/apps/cdc_msd_basic/readme.html#running-the-application"
  },"12": {
    "doc": "CDC MSD Basic Example",
    "title": "CDC MSD Basic Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_basic/readme.html",
    "relUrl": "/apps/cdc_msd_basic/readme.html"
  },"13": {
    "doc": "CDC MSD SD Card Example",
    "title": "CDC MSD SD Card Example (cdc_msd_sdcard)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support composite USB Device. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_sdcard/readme.html#cdc-msd-sd-card-example-cdc_msd_sdcard",
    "relUrl": "/apps/cdc_msd_sdcard/readme.html#cdc-msd-sd-card-example-cdc_msd_sdcard"
  },"14": {
    "doc": "CDC MSD SD Card Example",
    "title": "Description",
    "content": "This application creates a USB CDC Device that enumerates as a COM port and Flash Drive simultaneously. The COM port can be opened using any of the terminal applications. To demonstrate two-way communication, a character typed on the terminal window is echoed back by the USB device. Flash drive acts similar to any Mass Storage Class device where the SD Card is used as storage media. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_sdcard/readme.html#description",
    "relUrl": "/apps/cdc_msd_sdcard/readme.html#description"
  },"15": {
    "doc": "CDC MSD SD Card Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/cdc_msd_sdcard. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | sam_9x60_ek.X | MPLABX | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek.X | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_a5d2_xult.X | MPLABX | ATSAMA5D27C | SAMA5D2 Xplained Ultra Board | . | sam_a5d27_som1_ek.X | MPLABX | ATSAMA5D27C | SAMA5D27 SOM1 Kit1 | . | sam_a5d27_wlsom1_ek1.X | MPLABX | ATSAMA5D27C | ATSAMA5D27 WLSOM1 EK1 | . | sam_a7g5_ek.X | MPLABX | SAMA7G54 | SAMA7G5 EK Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_sdcard/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/cdc_msd_sdcard/readme.html#downloading-and-building-the-application"
  },"16": {
    "doc": "CDC MSD SD Card Example",
    "title": " Configuring the Hardware",
    "content": "SAM9X60-EK Evaluation Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC connector J4 on the board. | Reset the board by pressing the Push Button SW3. | . | Jumpers J20, J21, and J13 must be open. | Jumper J2 and J3 must be shorted. | Connect the USB Micro-B port J22 on board to the computer using a micro USB cable (to enable the debug com port). | Connect the USB Micro-B Connector (J7) on the board to the computer using a micro USB cable. | LED D1 indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. Note: Reset push button on SAM9X60 EK is labeled as SW3 . | . SAMA5D2 Xplained Ultra Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC1 slot on the board. | Reset the board by pressing the Push Button BP3. | . | Short jumper JP2(DEBUG_DIS). | Connect the EDBG USB Micro-B port J14 on the board to the computer using a micro USB cable. | Use the “A5-USB-A” connector (J23 - Micro A/B connector) on the board to connect the USB device to the USB Host. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press PB_USER Switch to trigger communication from the USB Device to the USB Host. | . Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware is required: . | micro-sd Click board | micro-sd card | . | Insert the micro-sd click board into the Mikro BUS 1 connector on the Curiosity PIC32MX470 Development Board. | Insert the micro-SD card into the micro-SD Card slot of the micro-sd click board. | USB micro-B port J12 to connect the USB device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . Curiosity PIC32MZ EF 2.0 Development Board . | To run the demo, the following additional hardware is required: . | micro-sd Click board | micro-sd card | . | Insert the micro-sd click board into the Mikro BUS 1 connector on the Curiosity PIC32MZ EF 2.0 Development Board. | Insert the micro-SD card into the micro-SD Card slot of the micro-sd click board. | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . SAMA5D27 SOM1 Kit1 . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC0 slot (J12) on the board. | Reset the board by pressing the Push Button PB1. | . | Connect the Debug USB port (J10) on the board to the computer using a micro USB cable. | Connect the USB Micro-B Connector (J17) on the board to the computer using a micro USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the pushbutton PB4 to trigger communication from the USB Device to the USB Host. | . ATSAMA5D27-WLSOM1 Evaluation Kit . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC0 Card Connector (J9) on the board. | Reset the board by pressing the Reset Button (SW2) | . | Connect the USB-A MicroAB connector (J10) on the board to the computer using a micro USB cable. | Press the “START_SOM” button to activate board start-up. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the pushbutton SW4 to trigger communication from the USB Device to the USB Host. | . SAMA7G5-EK Evaluation Kit . | Powered the board with an external power supply (J1) or power supply the board by connecting J7 to the computer using a micro USB cable. | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SD Card Connector (J4) on the board. | Reset the board by pressing the Reset Button (nRST) | . | Press the “nSTART” button to activate board start-up. | Connect the USB MicroAB connector (J7) to the computer using an USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the USER BUTTON SW1 to trigger communication from the USB Device to the USB Host. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_sdcard/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/cdc_msd_sdcard/readme.html#-configuring-the-hardware"
  },"17": {
    "doc": "CDC MSD SD Card Example",
    "title": "Running the Application",
    "content": "This demonstration application creates a composite USB Device that works simultaneously as a CDC and as a MSD device. This application combines the functionality of the cdc_com_port_single and msd_sdcard demonstration applications into one device. Open the project with appropriate IDE. Compile the project and program the target device. Running the CDC Device . The CDC Device application is same as cdc_com_port_single demo. Refer to local documentation from usb_apps_device/apps/cdc_com_port_single. The documentation is also available in the github path usb_apps_device/apps/cdc_com_port_single. Running the MSD SD Card Device . The MSD Basic Device application is same as msd_sdcard demo. Refer to local documentation from usb_apps_device/apps/msd_sdcard. The documentation is also available in the github path usb_apps_device/apps/msd_sdcard. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_sdcard/readme.html#running-the-application",
    "relUrl": "/apps/cdc_msd_sdcard/readme.html#running-the-application"
  },"18": {
    "doc": "CDC MSD SD Card Example",
    "title": "CDC MSD SD Card Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_msd_sdcard/readme.html",
    "relUrl": "/apps/cdc_msd_sdcard/readme.html"
  },"19": {
    "doc": "CDC Serial Emulator Example",
    "title": "CDC Serial Emulator Example (cdc_serial_emulator)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support CDC Device Class using a real-world application. It implements a CDC USART Serial Emulator application. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator/readme.html#cdc-serial-emulator-example-cdc_serial_emulator",
    "relUrl": "/apps/cdc_serial_emulator/readme.html#cdc-serial-emulator-example-cdc_serial_emulator"
  },"20": {
    "doc": "CDC Serial Emulator Example",
    "title": "Description",
    "content": "This application demonstrates the use of the CDC device class to implement a USB-to-Serial Converter. TThe application enumerates a COM port on the personal computer. Data received through the CDC USB interface is forwarded to a UART. Data received on the UART is forwarded to the CDC USB interface on the target board. The interface between the UART and the CDC USB Interface on the board demonstrates the USB to UART capability. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator/readme.html#description",
    "relUrl": "/apps/cdc_serial_emulator/readme.html#description"
  },"21": {
    "doc": "CDC Serial Emulator Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps\\cdc_serial_emulator. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | sam_d11_xpro.X | MPLABX | ATSAMD11D14A | SAMD11 Xplained Pro board | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAMD21 Xplained Pro board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra board | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/cdc_serial_emulator/readme.html#downloading-and-building-the-application"
  },"22": {
    "doc": "CDC Serial Emulator Example",
    "title": " Configuring the Hardware",
    "content": "SAM D11 Xplained Pro board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | The CDC USB (UART to USB) interface on this board is served by the EDBG connector (DEBUG_USB). Connecting this to the PC will create a COM port on the PC Host. | . SAMD21 Xplained Pro board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | The CDC USB (UART to USB) interface on this board is served by the EDBG connector (DEBUG_USB). Connecting this to the PC will create a COM port on the PC Host. | . SAME54 Xplained Pro board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | The CDC USB (UART to USB) interface on this board is served by the EDBG connector (DEBUG_USB). Connecting this to the PC will create a COM port on the PC Host. | . SAME70 Xplained Ultra board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | The CDC USB (UART to USB) interface on this board is served by the EDBG connector J300. Connecting this to the PC will create a COM port on the PC Host. | . Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | The CDC USB (UART to USB) interface on this board is served by the DEBUG_USB connector J700. Connecting this to the PC will create a COM port on the PC Host. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/cdc_serial_emulator/readme.html#-configuring-the-hardware"
  },"23": {
    "doc": "CDC Serial Emulator Example",
    "title": "Running the Application",
    "content": "This application demonstrates the use of the CDC Device class in implementing a USB-to-Serial Converter. The application enumerates a COM port on the USB Host PC. Data received through the CDC USB interface is forwarded to a UART. Data received on the UART is forwarded to the CDC USB interface. This emulates a USB-to-Serial Converter. | Open the project with appropriate IDE. Compile the project and program the target device. | Attach the device to the host. If the host is a personal computer and this is the first time you have plugged this device into the computer you may be prompted for a .inf file. | Select the “Install from a list or specific location (Advanced)” option. Navigate to the driver path available in the repo - ..\\usb_apps_device\\apps\\cdc_serial_emulator\\inf. NOTE: The LEDs on the demonstration board will indicate the USB state of the device. Refer to the Configuring the Hardware section for the selected target hardware. | Once the device is successfully installed and visible on the Device Manager, open up a terminal program, such as HyperTerminal and select the appropriate COM port. This is terminal 1. Set the serial port settings as follows: . | Baud : 9600 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Connect the CDC USB port to the Host PC and ensure that a second COM port is available on the Host PC. Refer to the Configuring the Hardware section for more details. Open a serial terminal program and select the second COM port. The serial settings of this COM port should match the setting made in previous step. This is terminal 2. The setup should resemble the below figure. Note: The baud rate can be different from 9600 but the chosen value has to be the same on both the instances of terminal program. | To run the demonstration, turn on local echo on both the terminals. If the terminal application is Tera Term, navigate to Setup-&gt;Terminal to turn on local echo. Type a character or string in one terminal window. The same character or string shall appear on the second terminal window and vice versa. The following screen shot shows two instances of Tera Term. Note: Some terminal programs, like HyperTerminal, require users to click the disconnect button before removing the device from the computer. Failing to do so may result in having to close and open the program again to reconnect to the device. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator/readme.html#running-the-application",
    "relUrl": "/apps/cdc_serial_emulator/readme.html#running-the-application"
  },"24": {
    "doc": "CDC Serial Emulator Example",
    "title": "CDC Serial Emulator Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator/readme.html",
    "relUrl": "/apps/cdc_serial_emulator/readme.html"
  },"25": {
    "doc": "CDC Serial Emulator MSD Example",
    "title": "CDC Serial Emulator MSD Example (cdc_serial_emulator_msd)",
    "content": "This demonstration application creates a USB composite device that combines the functionality of the cdc_serial_emulator and msd_basic demonstration applications. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator_msd/readme.html#cdc-serial-emulator-msd-example-cdc_serial_emulator_msd",
    "relUrl": "/apps/cdc_serial_emulator_msd/readme.html#cdc-serial-emulator-msd-example-cdc_serial_emulator_msd"
  },"26": {
    "doc": "CDC Serial Emulator MSD Example",
    "title": "Description",
    "content": "This application demonstrates a USB composite device with CDC and MSD functions. The CDC function implements a USB-to-Serial Converter. The MSD function driver implements a USB Mass Storage Device with NVM as storage media. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator_msd/readme.html#description",
    "relUrl": "/apps/cdc_serial_emulator_msd/readme.html#description"
  },"27": {
    "doc": "CDC Serial Emulator MSD Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps\\cdc_serial_emulator_msd. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator_msd/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/cdc_serial_emulator_msd/readme.html#downloading-and-building-the-application"
  },"28": {
    "doc": "CDC Serial Emulator MSD Example",
    "title": " Configuring the Hardware",
    "content": "Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | The CDC USB (UART to USB) interface on this board is served by the DEBUG_USB connector J700. Connecting this to the PC will create a COM port on the PC Host. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator_msd/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/cdc_serial_emulator_msd/readme.html#-configuring-the-hardware"
  },"29": {
    "doc": "CDC Serial Emulator MSD Example",
    "title": "Running the Application",
    "content": "This demonstration functions as a composite USB Device that combines the features of the devices created by the cdc_serial_emulator and the msd_basic demonstration applications. Refer to Running the Demonstration section of the cdc_serial_emulator demonstration and Running the Demonstration section of the msd_basic demonstration for details on exercising the CDC and MSD functions, respectively. The LEDs on the demonstration board will indicate the USB state of the device, as described in the USB Device State and LED Indication Table in the Device section. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator_msd/readme.html#running-the-application",
    "relUrl": "/apps/cdc_serial_emulator_msd/readme.html#running-the-application"
  },"30": {
    "doc": "CDC Serial Emulator MSD Example",
    "title": "CDC Serial Emulator MSD Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_serial_emulator_msd/readme.html",
    "relUrl": "/apps/cdc_serial_emulator_msd/readme.html"
  },"31": {
    "doc": "HID Basic Example",
    "title": "HID Basic Example (hid_basic)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support custom HID device class. This custom HID device can be controlled by a PC-based utility. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic/readme.html#hid-basic-example-hid_basic",
    "relUrl": "/apps/hid_basic/readme.html#hid-basic-example-hid_basic"
  },"32": {
    "doc": "HID Basic Example",
    "title": "Description",
    "content": "This application creates a USB HID Device that enumerates as a custom USB HID device on the USB host PC. The device allows the USB Host utility to control the LEDs on the board and query the status of a switch. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic/readme.html#description",
    "relUrl": "/apps/hid_basic/readme.html#description"
  },"33": {
    "doc": "HID Basic Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/hid_basic. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32cm_le00_curiosity_pro.X | MPLABX | PIC32CM5164LE00100 | PIC32CM Lx Curiosity Pro Board | . | pic32mz_ef_sk.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | pic32mz_ef_sk_freertos.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | sam_9x60_ek.X | MPLABX | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_freertos.X | MPLABX | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_a5d2_xult.X | MPLABX | ATSAMA5D27C | SAMA5D2 Xplained Ultra Board | . | sam_a5d2_xult_freertos.X | MPLABX | ATSAMA5D27C | SAMA5D2 Xplained Ultra Board | . | sam_a5d2_xult_iar.IAR | IAR | ATSAMA5D27C | SAMA5D2 Xplained Ultra Board | . | sam_a5d27_som1_ek.X | MPLABX | ATSAMA5D27C | SAMA5D27 SOM1 Kit1 | . | sam_a5d27_som1_ek_freertos.X | MPLABX | ATSAMA5D27C | SAMA5D27 SOM1 Kit1 | . | sam_a5d27_wlsom1_ek1.X | MPLABX | ATSAMA5D27C | ATSAMA5D27 WLSOM1 EK1 | . | sam_a5d27_wlsom1_ek1_freertos.X | MPLABX | ATSAMA5D27C | ATSAMA5D27 WLSOM1 EK1 | . | sam_a7g5_ek.X | MPLABX | SAMA7G54 | SAMA7G5 EK Board | . | sam_d11_xpro.X | MPLABX | ATSAMD11D14A | SAMD11 Xplained Pro Board | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAMD21 Xplained Pro Board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro Board | . | sam_e54_xpro_freertos.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra Board | . | sam_g55_xpro.X | MPLABX | ATSAMG55J19 | SAMG55 Xplained Pro Board | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mm_usb_curiosity.X | MPLABX | PIC32MM0256GPM064 | PIC32MM USB Curiosity Development Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/hid_basic/readme.html#downloading-and-building-the-application"
  },"34": {
    "doc": "HID Basic Example",
    "title": " Configuring the Hardware",
    "content": "SAMD11 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAMD21 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAME54 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAME70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . SAMG55 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . Curiosity Pro PIC32CM LE00 Development Board . | Use the USB micro-A/B “TARGET USB” connector (D200) to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . Curiosity PIC32MX470 Development Board . | Use the USB micro-B port J12 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . | Use the micro-A/B port J4 (which is located on the bottom side of the board) to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . PIC32MM USB Curiosity Development Board . | Use the micro-B USB connector USB2 on the board to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . SAM9X60-EK Evaluation Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC connector J4 on the board. | Reset the board by pressing the Push Button SW3. | . | Jumpers J20, J21, and J13 must be open. | Jumper J2 and J3 must be shorted. | Connect the USB Micro-B port J22 on board to the computer using a micro USB cable (to enable the debug com port). | Connect the USB Micro-B Connector (J7) on the board to the computer using a micro USB cable. | LED D1 indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the switch SW1 to trigger communication from the USB Device to the USB Host. Note: Reset push button on SAM9X60 EK is labeled as SW3 . | . SAMA5D2 Xplained Ultra Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC1 slot on the board. | Reset the board by pressing the Push Button BP3. | . | Short jumper JP2(DEBUG_DIS). | Connect the EDBG USB Micro-B port J14 on the board to the computer using a micro USB cable. | Use the “A5-USB-A” connector (J23 - Micro A/B connector) on the board to connect the USB device to the USB Host. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press PB_USER Switch to trigger communication from the USB Device to the USB Host. | . SAMA5D27 SOM1 Kit1 . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC0 slot (J12) on the board. | Reset the board by pressing the Push Button PB1. | . | Connect the Debug USB port (J10) on the board to the computer using a micro USB cable. | Connect the USB Micro-B Connector (J17) on the board to the computer using a micro USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the pushbutton PB4 to trigger communication from the USB Device to the USB Host. | . ATSAMA5D27-WLSOM1 Evaluation Kit . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC0 Card Connector (J9) on the board. | Reset the board by pressing the Reset Button (SW2) | . | Connect the USB-A MicroAB connector (J10) on the board to the computer using a micro USB cable. | Press the “START_SOM” button to activate board start-up. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the pushbutton SW4 to trigger communication from the USB Device to the USB Host. | . SAMA7G5-EK Evaluation Kit . | Powered the board with an external power supply (J1) or power supply the board by connecting J7 to the computer using a micro USB cable. | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SD Card Connector (J4) on the board. | Reset the board by pressing the Reset Button (nRST) | . | Press the “nSTART” button to activate board start-up. | Connect the USB MicroAB connector (J7) to the computer using an USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). The LED is turned off when the Bus is suspended. | Press the USER BUTTON SW1 to trigger communication from the USB Device to the USB Host. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/hid_basic/readme.html#-configuring-the-hardware"
  },"35": {
    "doc": "HID Basic Example",
    "title": "Running the Application",
    "content": "This demonstration uses the selected hardware platform as a HID class USB device, but uses the HID class for general purpose I/O operations. Open the project with appropriate IDE. Compile the project and program the target device. Typically, the HID class is used to implement human interface products, such as mice and keyboards. The HID protocol, is however, quite flexible, and can be adapted and used to send/receive general purpose data to/from a USB device. Using the HID class for general purpose I/O operations is quite advantageous, in that it does not require any kind of custom driver installation process. HID class drivers are already provided by and are distributed with common operating systems. Therefore, upon plugging in a HID class device into a typical computer system, no user installation of drivers is required, the installation is fully automatic. The LEDs on the demonstration board will indicate the USB state of the device as described in Configuring the Hardware section. HID devices primarily communicate through one interrupt IN endpoint and one interrupt OUT endpoint. In most applications, this effectively limits the maximum achievable bandwidth for full speed HID devices to 64 kBytes/s of IN traffic, and 64 kBytes/s of OUT traffic (64 kB/s, but effectively “full duplex”). The GenericHIDSimpleDemo.exe program, and the associated firmware demonstrate how to use the HID protocol for basic general purpose USB data transfer. Before you can run the GenericHIDSimpleDemo.exe executable, you will need to have the Microsoft® .NET Framework Version 2.0 Redistributable Package (later versions are probably acceptable, but have not been tested) installed on your computer. Programs that were built in the Visual Studio® .NET languages require the .NET redistributable package. The redistributable package can be freely downloaded from Microsoft’s website. Users of Windows Vista® operating systems will not need to install the .NET framework, as it comes preinstalled as part of the operating system. Launching the Application . To launch the application, open the executable GenericHIDSimpleDemo.exe from the folder path usb_apps_device/apps/hid_basic/bin/GenericHIDSimpleDemo.exe. A UI similar to the following should appear: . Note: If instead of this window, an error message appears while trying to launch the application, it is likely the Microsoft .NET Framework Version 2.0 Redistributable Package has not yet been installed. Please install it and try again. Send/Receive Packets . To begin sending/receiving packets to the device, you must first find and connect to the device. As configured by default, the application is looking for HID class USB devices with VID = 0x04D8 and PID = 0x003F. The device descriptor in the firmware project meant to be used with this demonstration uses the same VID/PID. If you plug in a USB device programmed with the correct precompiled .hex file, and click Connect, the other push buttons should become enabled. If clicking Connect has no effect, it is likely the USB device is either not connected, or has not been programmed with the correct firmware. Clicking Toggle LED(s) should send a single packet of general purpose generic data to the HID class USB peripheral device. The data will arrive on the interrupt OUT endpoint. The firmware has been configured to receive this generic data packet, parse the packet looking for the Toggle LED(s) command, and should respond appropriately by controlling the LED(s) on the demonstration board. The Get Pushbutton State option will send one packet of data over the USB to the peripheral device (to the interrupt OUT endpoint) requesting the current push button state. The firmware will process the received Get Pushbutton State command, and will prepare an appropriate response packet depending upon the pushbutton state. Refer to the Configuring the Hardware section for details on the LED indication and Switch, that are relevant to the selected hardware. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic/readme.html#running-the-application",
    "relUrl": "/apps/hid_basic/readme.html#running-the-application"
  },"36": {
    "doc": "HID Basic Example",
    "title": "HID Basic Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic/readme.html",
    "relUrl": "/apps/hid_basic/readme.html"
  },"37": {
    "doc": "HID Basic Remote Wakeup Example",
    "title": "HID Basic Remote Wakeup Example (hid_basic_remote_wakeup)",
    "content": "This application demonstrates the ability of the MPLAB® Harmony USB Device Stack to support the Remote Wakeup feature using a custom HID device class example. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic_remote_wakeup/readme.html#hid-basic-remote-wakeup-example-hid_basic_remote_wakeup",
    "relUrl": "/apps/hid_basic_remote_wakeup/readme.html#hid-basic-remote-wakeup-example-hid_basic_remote_wakeup"
  },"38": {
    "doc": "HID Basic Remote Wakeup Example",
    "title": "Description",
    "content": "This application creates a USB HID Device that enumerates as a custom USB HID device on the USB host PC. The device allows the USB Host utility to control the LEDs on the board and query the status of a switch. This example demonstrates suspend/resume initiated by PC host and Remote Wakeup initiated by HID Device using a PC-based utility. The application will put the device to Standby sleep mode when it receives a suspend from PC host. The Push-button is used as wakeup source when the device goes to Standby sleep mode. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic_remote_wakeup/readme.html#description",
    "relUrl": "/apps/hid_basic_remote_wakeup/readme.html#description"
  },"39": {
    "doc": "HID Basic Remote Wakeup Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using the MPLAB® Harmony Content Manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/hid_basic_remote_wakeup. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAM E54 Xplained Pro Board | . | sam_l21_xpro.X | MPLABX | ATSAML21J18B | SAML21 Xplained Pro Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic_remote_wakeup/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/hid_basic_remote_wakeup/readme.html#downloading-and-building-the-application"
  },"40": {
    "doc": "HID Basic Remote Wakeup Example",
    "title": " Configuring the Hardware",
    "content": "SAME54 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | When the device is in Standby sleep, SW0 acts as wakeup source and brings the device to active mode. The device sends Remote wakeup to PC host and then goes back to Standby sleep mode to let the PC host drive the resume. | To measure current consumed by the device in different Sleep modes, refer to Section Current Measurement Header in SAME54 Xplained Pro Hardware User Guide. Refer to Virtual COM Port section to know more on using EDBG to send runtime messages. | . SAML21 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | When the device is in Standby sleep, SW0 acts as wakeup source and brings the device to active mode. The device sends Remote wakeup to PC host and then goes back to Standby sleep mode to let the PC host drive the resume. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic_remote_wakeup/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/hid_basic_remote_wakeup/readme.html#-configuring-the-hardware"
  },"41": {
    "doc": "HID Basic Remote Wakeup Example",
    "title": "Running the Application",
    "content": "Application State Messages using EDBG . Runtime messages are sent through UART, which is received by EDBG and sent to PC terminal as USB CDC data. Follow the below steps to see the runtime messages. | When the debug USB port is connected to the PC, it should be visible as a virtual COM port. | Open up a terminal program, such as HyperTerminal and select the appropriate COM port. Set the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | When the programming is complete and the application starts running, the title message will be seen. | Connect the Upstream USB port to the PC and when the enumeration is successful, Device Configured message is seen. Since this is a HID device, PC host will suspend the device, unless an application is accessing it. The terminal window would now look like this. | . HID Basic operation . The HID Basic operation is same as hid_basic demo. Refer to local documentation from usb_apps_device/apps/hid_basic. The documentation is also available in the github path usb_apps_device/apps/hid_basic. Remote Wakeup, Suspend and Resume operation . | To demonstrate the Remote wakeup capabilities along with the debug messages, the Upstream ports of target USB and debug USB should be connected to two different PC Hosts. This is shown below. | When the PC utility is connected to the USB device, USB Device Resumed message is seen. Closing the application would suspend the USB device and the respective message will be seen. | The suspend due to closure of PC utility will not enable the Remote Wakeup of USB device. Hence the message USB host Suspend device or Remote wakeup is not enabled would be seen. The device will be put to Standby Sleep mode. | A resume from PC host can wake up the device and continue with HID operation. This is when USB Device Resumed message is shown. | Put the PC host connected to Target USB port to sleep to test Remote wakeup. If the device is allowed to wake up PC host, then the Remote Wakeup will be enabled in the USB device by PC host before suspending the bus. This is shown through USB host in Sleep mode - Remote wakeup enabled. Press Button to wakeup Host. message. | If the message USB host Suspend device or Remote wakeup is not enabled is seen when PC host is put to sleep, it means the USB device is not allowed to do Remote Wakeup. Go to the power settings of the USB device in PC host and enable Remote wakeup feature. This can be done in a Windows machine through device manager or command prompt. Below are the commands and their usage. | powercfg -devicequery wake_from_any - Displays all devices that are connected to the PC. | powercfg -devicequery wake_armed - Devices that can wake up PC from its sleep state. | powercfg -deviceenablewake - To enable Remote wakeup privilege for any of the connected Devices . | eg:- powercfg -deviceenablewake “HID-compliant vendor-defined device (002)” | . | powercfg -devicedisablewake - To disable Remote wakeup privilege for any of the connected Devices. | . | If the Remote Wakeup is enabled and the device is put to sleep, press the switch to initiate a Remote Wakeup. The PC host will respond back with a resume and device will continue with its HID operation. The screenshot showing suspend, resume and remote wakeup operations are shown below. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic_remote_wakeup/readme.html#running-the-application",
    "relUrl": "/apps/hid_basic_remote_wakeup/readme.html#running-the-application"
  },"42": {
    "doc": "HID Basic Remote Wakeup Example",
    "title": "HID Basic Remote Wakeup Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_basic_remote_wakeup/readme.html",
    "relUrl": "/apps/hid_basic_remote_wakeup/readme.html"
  },"43": {
    "doc": "HID Joystick Example",
    "title": "HID Joystick Example (hid_joystick)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support custom HID joystick. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_joystick/readme.html#hid-joystick-example-hid_joystick",
    "relUrl": "/apps/hid_joystick/readme.html#hid-joystick-example-hid_joystick"
  },"44": {
    "doc": "HID Joystick Example",
    "title": "Description",
    "content": "This demonstration application creates a custom HID joystick. This application is only intended to demonstrate creation of Joystick HID Report descriptors and may not be a definite end solution. The end application requirements may need the report descriptor to be modified. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_joystick/readme.html#description",
    "relUrl": "/apps/hid_joystick/readme.html#description"
  },"45": {
    "doc": "HID Joystick Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/hid_joystick. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_joystick/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/hid_joystick/readme.html#downloading-and-building-the-application"
  },"46": {
    "doc": "HID Joystick Example",
    "title": " Configuring the Hardware",
    "content": "Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Use Switch SW1 to stop and start the circular motion of the mouse pointer. | . Curiosity PIC32MX470 Development Board . | Use the USB micro-B port J12 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . SAME70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Use Switch SW1 to stop and start the circular motion of the mouse pointer. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_joystick/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/hid_joystick/readme.html#-configuring-the-hardware"
  },"47": {
    "doc": "HID Joystick Example",
    "title": "Running the Application",
    "content": "This demonstration uses the selected hardware platform as a USB Joystick. Open the project with appropriate IDE. Compile the project and program the target device. The LED on the demonstration board will indicate the USB state of the device. Refer to the Configuring the Hardware Section for details. Pressing the button will cause the device to: . | Indicate that the “x” button is pressed, but no others | Move the hat switch to the “east” position | Move the X and Y coordinates to their extreme values . | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_joystick/readme.html#running-the-application",
    "relUrl": "/apps/hid_joystick/readme.html#running-the-application"
  },"48": {
    "doc": "HID Joystick Example",
    "title": "HID Joystick Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_joystick/readme.html",
    "relUrl": "/apps/hid_joystick/readme.html"
  },"49": {
    "doc": "HID Keyboard Example",
    "title": "HID Keyboard Example (hid_keyboard)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support Generic HID keyboard. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_keyboard/readme.html#hid-keyboard-example-hid_keyboard",
    "relUrl": "/apps/hid_keyboard/readme.html#hid-keyboard-example-hid_keyboard"
  },"50": {
    "doc": "HID Keyboard Example",
    "title": "Description",
    "content": "This demonstration application creates a Generic HID keyboard. Pressing a switch on the target board emulates a keyboard key press. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_keyboard/readme.html#description",
    "relUrl": "/apps/hid_keyboard/readme.html#description"
  },"51": {
    "doc": "HID Keyboard Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/hid_keyboard. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_keyboard/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/hid_keyboard/readme.html#downloading-and-building-the-application"
  },"52": {
    "doc": "HID Keyboard Example",
    "title": " Configuring the Hardware",
    "content": "Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press Switch SW1 to exercise the keyboard key press function. | . Curiosity PIC32MX470 Development Board . | Use the USB micro-B port J12 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . SAM E70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). LED3 also indicates status of Caps Lock on the PC. | Press Switch SW1 to exercise the keyboard key press function. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_keyboard/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/hid_keyboard/readme.html#-configuring-the-hardware"
  },"53": {
    "doc": "HID Keyboard Example",
    "title": "Running the Application",
    "content": "This demonstration uses the selected hardware platform as a USB keyboard. Open the project with appropriate IDE. Compile the project and program the target device. The LEDs on the demonstration board will indicate the USB state of the device, as described in the Configuring the Hardware section. Before pressing the button, select a window in which it is safe to type text freely. Pressing the button on the demonstration board will cause the device to print a character on the screen. LED on the board will also indicate the current CapsLock key status. Note: If the Caps lock status on the PC is OFF when the device was attached the LED will turn ON and immediately turn off. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_keyboard/readme.html#running-the-application",
    "relUrl": "/apps/hid_keyboard/readme.html#running-the-application"
  },"54": {
    "doc": "HID Keyboard Example",
    "title": "HID Keyboard Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_keyboard/readme.html",
    "relUrl": "/apps/hid_keyboard/readme.html"
  },"55": {
    "doc": "HID Mouse Example",
    "title": "HID Mouse Example (hid_mouse)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support HID based two-button mouse device. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_mouse/readme.html#hid-mouse-example-hid_mouse",
    "relUrl": "/apps/hid_mouse/readme.html#hid-mouse-example-hid_mouse"
  },"56": {
    "doc": "HID Mouse Example",
    "title": "Description",
    "content": "This demonstration application creates a USB HID based two-button mouse device. When connected, the device emulates mouse operation by moving the cursor in a circular pattern. When the button in USB device is pressed the movement of cursor is Stopped/Started again . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_mouse/readme.html#description",
    "relUrl": "/apps/hid_mouse/readme.html#description"
  },"57": {
    "doc": "HID Mouse Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/hid_mouse. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAM E54 Xplained Pro Board | . | sam_e54_xpro_freertos.X | MPLABX | ATSAME54P20A | SAM E54 Xplained Pro Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAM E70 Xplained Ultra Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_mouse/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/hid_mouse/readme.html#downloading-and-building-the-application"
  },"58": {
    "doc": "HID Mouse Example",
    "title": " Configuring the Hardware",
    "content": "Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED2 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Use Switch SW1 to stop and start the circular motion of the mouse pointer. | . Curiosity PIC32MX470 Development Board . | Use the USB micro-B port J12 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . SAM E54 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Use Switch SW1 to stop and start the circular motion of the mouse pointer. | . SAM E70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Use Switch SW1 to stop and start the circular motion of the mouse pointer. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_mouse/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/hid_mouse/readme.html#-configuring-the-hardware"
  },"59": {
    "doc": "HID Mouse Example",
    "title": "Running the Application",
    "content": "This demonstration uses the selected hardware platform as a USB Mouse. Open the project with appropriate IDE. Compile the project and program the target device. The LED on the demonstration board will indicate the USB state of the device. Refer to the Configuring the Hardware Section for details. Before connecting the board to the computer through the USB cable please be aware that the device will begin moving the mouse cursor on the computer. There are two ways to stop the device from allowing the cursor to continue to move. The first way is to disconnect the device from the computer. The second is to press the correct button on the hardware platform. Pressing the button again will cause the mouse cursor to start moving in a circle again. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_mouse/readme.html#running-the-application",
    "relUrl": "/apps/hid_mouse/readme.html#running-the-application"
  },"60": {
    "doc": "HID Mouse Example",
    "title": "HID Mouse Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_mouse/readme.html",
    "relUrl": "/apps/hid_mouse/readme.html"
  },"61": {
    "doc": "HID MSD Basic Example",
    "title": "HID MSD Basic Example (hid_msd_basic)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support USB composite device. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_msd_basic/readme.html#hid-msd-basic-example-hid_msd_basic",
    "relUrl": "/apps/hid_msd_basic/readme.html#hid-msd-basic-example-hid_msd_basic"
  },"62": {
    "doc": "HID MSD Basic Example",
    "title": "Description",
    "content": "This demonstration application creates a USB Device that combines the functionality of the hid_basic and msd_basic demonstration applications. | To demonstrate HID functionality, the device allows USB Host utility to control the LEDs on the board and query the status of a switch. | To demonstrate MSD functionality, application allows read / write / modify / delete data from a PC host like any normal Flash drive. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_msd_basic/readme.html#description",
    "relUrl": "/apps/hid_msd_basic/readme.html#description"
  },"63": {
    "doc": "HID MSD Basic Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/hid_msd_basic. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAMD21 Xplained Pro Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_msd_basic/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/hid_msd_basic/readme.html#downloading-and-building-the-application"
  },"64": {
    "doc": "HID MSD Basic Example",
    "title": " Configuring the Hardware",
    "content": "Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED2 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Pressing the LED Toggle button on the USB Host PC Utility toggles LED0. | The USB Host PC utility monitors the switch SW1 switch press on the board. | . Curiosity PIC32MX470 Development Board . | Use the USB micro-B port J12 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Pressing the LED Toggle button on the USB Host PC Utility toggles the LED. | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . SAMD21 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Pressing the LED Toggle button on the USB Host PC Utility toggles LED0. | The USB Host PC utility monitors the switch SW0 switch press on the board. | . SAME70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Pressing the LED Toggle button on the USB Host PC Utility toggles LED3. | The USB Host PC utility monitors SW1 switch press on the board. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_msd_basic/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/hid_msd_basic/readme.html#-configuring-the-hardware"
  },"65": {
    "doc": "HID MSD Basic Example",
    "title": "Running the HID Application",
    "content": "This demonstration uses the selected hardware platform as a USB Composite device handling both HID class device and MSD class device. In HID functionality, the device allows USB Host utility to control the LEDs on the board and query the status of a switch. In MSD functionality, application allows read / write / modify / delete data from a PC host like any normal Flash drive. Open the project with appropriate IDE. Compile the project and program the target device. Running the HID Device . The HID Device application is same as hid_basic demo. Refer to local documentation from usb_apps_device/apps/hid_basic. The documentation is also available in the github path usb_apps_device/apps/hid_basic. Note: The PC application needed for controlling the HID function should be used from usb_apps_device/apps/hid_msd_basic\\bin\\GenericHIDSimpleDemo_Composite_HID+MSD_Demo_only_PID_0x0054.exe. To launch the application, double click the executable GenericHIDSimpleDemo_Composite_HID+MSD_Demo_only_PID_0x0054.exe. Running the MSD Basic Device . The MSD Basic Device application is same as msd_basic demo. Refer to local documentation from usb_apps_device/apps/msd_basic. The documentation is also available in the github path usb_apps_device/apps/msd_basic. ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_msd_basic/readme.html#running-the-hid-application",
    "relUrl": "/apps/hid_msd_basic/readme.html#running-the-hid-application"
  },"66": {
    "doc": "HID MSD Basic Example",
    "title": "HID MSD Basic Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/hid_msd_basic/readme.html",
    "relUrl": "/apps/hid_msd_basic/readme.html"
  },"67": {
    "doc": "MSD Basic Example",
    "title": "MSD Basic Example (msd_basic)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support USB Mass Storage Device. The application uses MCU’s NVM region as storage media. ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_basic/readme.html#msd-basic-example-msd_basic",
    "relUrl": "/apps/msd_basic/readme.html#msd-basic-example-msd_basic"
  },"68": {
    "doc": "MSD Basic Example",
    "title": "Description",
    "content": "This application creates a USB MSD Device that enumerates as a Flash Drive on the USB host PC. The application allows read / write / modify / delete data from a PC host like any normal Flash drive. ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_basic/readme.html#description",
    "relUrl": "/apps/msd_basic/readme.html#description"
  },"69": {
    "doc": "MSD Basic Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/msd_basic. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32cm_le00_curiosity_pro.X | MPLABX | PIC32CM5164LE00100 | PIC32CM Lx Curiosity Pro Board | . | pic32mz_ef_sk.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | pic32mz_ef_sk_freertos.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAMD21 Xplained Pro Board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro Board | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mm_usb_curiosity.X | MPLABX | PIC32MM0256GPM064 | PIC32MM USB Curiosity Development Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_basic/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/msd_basic/readme.html#downloading-and-building-the-application"
  },"70": {
    "doc": "MSD Basic Example",
    "title": " Configuring the Hardware",
    "content": "SAMD21 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . SAME54 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . Curiosity PIC32MX470 Development Board . | Use the USB micro-B port J12 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . | Use the micro-A/B port J4 (which is located on the bottom side of the board) to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . PIC32MM USB Curiosity Development Board . | Use the micro-B USB connector USB2 on the board to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . Curiosity Pro PIC32CM LE00 Development Board . | Use the USB micro-B “TARGET USB” (J200) to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_basic/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/msd_basic/readme.html#-configuring-the-hardware"
  },"71": {
    "doc": "MSD Basic Example",
    "title": "Running the Application",
    "content": "This demonstration uses the selected hardware platform as a logical drive on the computer using the internal Flash of the device as the drive storage media. Connect the hardware platform to a computer through a USB cable. The device should appear as a new drive on the computer named “Drive Name”. The drive can used to store files. The LEDs on the demonstration board will indicate the USB state of the device. Refer to the Configuring the Hardware section for the selected target hardware. Note: . | The user should ensure that the Host is not currently writing data to the media before detaching the device. On a Windows computer before removing the device click on “Safely Remove Hardware” and click on “Eject Media”. | Reprogramming the development board will cause any stored files to be erased. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_basic/readme.html#running-the-application",
    "relUrl": "/apps/msd_basic/readme.html#running-the-application"
  },"72": {
    "doc": "MSD Basic Example",
    "title": "MSD Basic Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_basic/readme.html",
    "relUrl": "/apps/msd_basic/readme.html"
  },"73": {
    "doc": "MSD Multiple LUN Example",
    "title": "MSD Multiple LUN Example (msd_multiple_luns)",
    "content": "This application demonstrates data transfer between two storage media - SD card and non-volatile memory (NVM) - and a computer through USB Mass Storage Device (MSD). ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_multiple_luns/readme.html#msd-multiple-lun-example-msd_multiple_luns",
    "relUrl": "/apps/msd_multiple_luns/readme.html#msd-multiple-lun-example-msd_multiple_luns"
  },"74": {
    "doc": "MSD Multiple LUN Example",
    "title": "Description",
    "content": "This application demonstrates the creation of a USB device with multiple logical units. The storage media, SD Card, acts as one logical unit, and the NVM acts as the second logical unit. Data transfer between a computer and the logical units (SD Card / NVM) takes place through USB MSD. ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_multiple_luns/readme.html#description",
    "relUrl": "/apps/msd_multiple_luns/readme.html#description"
  },"75": {
    "doc": "MSD Multiple LUN Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/msd_multiple_luns. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_multiple_luns/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/msd_multiple_luns/readme.html#downloading-and-building-the-application"
  },"76": {
    "doc": "MSD Multiple LUN Example",
    "title": " Configuring the Hardware",
    "content": "Curiosity PIC32MZ EF 2.0 Development Board . | To run the demo, the following additional hardware is required: . | micro-sd Click board | micro-sd card | . | Insert the micro-sd click board into the Mikro BUS 1 connector on the Curiosity PIC32MZ EF 2.0 Development Board. | Insert the micro-SD card into the micro-SD Card slot of the micro-sd click board. | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware is required: . | micro-sd Click board | micro-sd card | . | Insert the micro-sd click board into the Mikro BUS 1 connector on the Curiosity PIC32MX470 Development Board. | Insert the micro-SD card into the micro-SD Card slot of the micro-sd click board. | Ensure that a jumper is placed at 4-3 on J8, to select supply from debug USB connector. | USB micro-B port J12 to connect the USB device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_multiple_luns/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/msd_multiple_luns/readme.html#-configuring-the-hardware"
  },"77": {
    "doc": "MSD Multiple LUN Example",
    "title": "Running the Application",
    "content": "This demonstration uses SD card and NVM as drive storage media and shows them as two logical drives on the computer. Connect the hardware platform to a computer through a USB cable. The device should appear as two new drives on the computer. The NVM media should appear as “Drive Name” and should have a sample “FILE.txt” file. The drive name for the SD card media depends on the micro SD card vendor. The drives can then be used to store files. The LEDs on the demonstration board will indicate the USB state of the device. Refer to the Configuring the Hardware section for the selected target hardware. Please note that the user should ensure that the Host is not currently writing data to the media before detaching the device. On a Windows computer before removing the device click on “Safely Remove Hardware” and click on “Eject Media”. ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_multiple_luns/readme.html#running-the-application",
    "relUrl": "/apps/msd_multiple_luns/readme.html#running-the-application"
  },"78": {
    "doc": "MSD Multiple LUN Example",
    "title": "MSD Multiple LUN Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_multiple_luns/readme.html",
    "relUrl": "/apps/msd_multiple_luns/readme.html"
  },"79": {
    "doc": "MSD SD Card Example",
    "title": "MSD SD Card Example (msd_sdcard)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support USB Mass Storage Device. The application uses SD Card as storage media. ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_sdcard/readme.html#msd-sd-card-example-msd_sdcard",
    "relUrl": "/apps/msd_sdcard/readme.html#msd-sd-card-example-msd_sdcard"
  },"80": {
    "doc": "MSD SD Card Example",
    "title": "Description",
    "content": "This application creates a USB MSD Device that enumerates as a Flash Drive on the USB host PC. The application allows read / write / modify / delete data from a PC host like any normal Flash drive. ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_sdcard/readme.html#description",
    "relUrl": "/apps/msd_sdcard/readme.html#description"
  },"81": {
    "doc": "MSD SD Card Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/msd_sdcard. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | sam_9x60_ek.X | MPLABX | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_a5d2_xult.X | MPLABX | ATSAMA5D27C | SAMA5D2 Xplained Ultra Board | . | sam_a5d27_som1_ek.X | MPLABX | ATSAMA5D27C | SAMA5D27 SOM1 Kit1 | . | sam_a5d27_wlsom1_ek1.X | MPLABX | ATSAMA5D27C | ATSAMA5D27 WLSOM1 EK1 | . | sam_a7g5_ek.X | MPLABX | SAMA7G54 | SAMA7G5 EK Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_sdcard/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/msd_sdcard/readme.html#downloading-and-building-the-application"
  },"82": {
    "doc": "MSD SD Card Example",
    "title": " Configuring the Hardware",
    "content": "SAME70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Insert the micro-SD card into the micro-SD Card slot (J700). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . SAM9X60-EK Evaluation Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC connector J4 on the board. | Reset the board by pressing the Push Button SW3. | . | Jumpers J20, J21, and J13 must be open. | Jumper J2 and J3 must be shorted. | Connect the USB Micro-B port J22 on board to the computer using a micro USB cable (to enable the debug com port). | Connect the USB Micro-B Connector (J7) on the board to the computer using a micro USB cable. | LED D1 indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). Note: Reset push button on SAM9X60 EK is labeled as SW3 . | . SAMA5D2 Xplained Ultra Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC1 slot on the board. | Reset the board by pressing the Push Button BP3. | . | Short jumper JP2(DEBUG_DIS). | Connect the EDBG USB Micro-B port J14 on the board to the computer using a micro USB cable. | Use the “A5-USB-A” connector (J23 - Micro A/B connector) on the board to connect the USB device to the USB Host. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | . Curiosity PIC32MX470 Development Board . | To run the demo, the following additional hardware is required: . | micro-sd Click board | micro-sd card | . | Insert the micro-sd click board into the Mikro BUS 1 connector on the Curiosity PIC32MX470 Development Board. | Insert the micro-SD card into the micro-SD Card slot of the micro-sd click board. | USB micro-B port J12 to connect the USB device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . Curiosity PIC32MZ EF 2.0 Development Board . | To run the demo, the following additional hardware is required: . | micro-sd Click board | micro-sd card | . | Insert the micro-sd click board into the Mikro BUS 1 connector on the Curiosity PIC32MZ EF 2.0 Development Board. | Insert the micro-SD card into the micro-SD Card slot of the micro-sd click board. | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . SAMA5D27 SOM1 Kit1 . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC0 slot (J12) on the board. | Reset the board by pressing the Push Button PB1. | . | Connect the Debug USB port (J10) on the board to the computer using a micro USB cable. | Connect the USB Micro-B Connector (J17) on the board to the computer using a micro USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | . ATSAMA5D27-WLSOM1 Evaluation Kit . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC0 Card Connector (J9) on the board. | Reset the board by pressing the Reset Button (SW2) | . | Connect the USB-A MicroAB connector (J10) on the board to the computer using a micro USB cable. | Press the “START_SOM” button to activate board start-up. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | . SAMA7G5-EK Evaluation Kit . | Powered the board with an external power supply (J1) or power supply the board by connecting J7 to the computer using a micro USB cable. | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SD Card Connector (J4) on the board. | Reset the board by pressing the Reset Button (nRST) | . | Press the “nSTART” button to activate board start-up. | Connect the USB MicroAB connector (J7) to the computer using an USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_sdcard/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/msd_sdcard/readme.html#-configuring-the-hardware"
  },"83": {
    "doc": "MSD SD Card Example",
    "title": "Running the Application",
    "content": "This demonstration uses the selected hardware platform as a logical drive on the computer using the internal Flash of the device as the drive storage media. Connect the hardware platform to a computer through a USB cable. The device should appear as a new drive on the computer named “Drive Name”. The drive can used to store files. The LEDs on the demonstration board will indicate the USB state of the device. Refer to the Configuring the Hardware section for the selected target hardware. Please note that the user should ensure that the Host is not currently writing data to the media before detaching the device. On a Windows computer before removing the device click on “Safely Remove Hardware” and click on “Eject Media”. ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_sdcard/readme.html#running-the-application",
    "relUrl": "/apps/msd_sdcard/readme.html#running-the-application"
  },"84": {
    "doc": "MSD SD Card Example",
    "title": "MSD SD Card Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/msd_sdcard/readme.html",
    "relUrl": "/apps/msd_sdcard/readme.html"
  },"85": {
    "doc": "Printer Example",
    "title": "Printer Example (printer)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support Printer Device Class. ",
    "url": "http://localhost:4000/usb_apps_device/apps/printer_basic/readme.html#printer-example-printer",
    "relUrl": "/apps/printer_basic/readme.html#printer-example-printer"
  },"86": {
    "doc": "Printer Example",
    "title": "Description",
    "content": "This demo uses PC running Windows 7 as a USB Host. The demo board programmed with the demo application, enumerates as “USB Printing Support” device when connected to the USB Host. This demo allows the user to print the text from Notepad or similar application in Windows using built in Generic/Text Only print driver. ",
    "url": "http://localhost:4000/usb_apps_device/apps/printer_basic/readme.html#description",
    "relUrl": "/apps/printer_basic/readme.html#description"
  },"87": {
    "doc": "Printer Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/printer. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | sam_9x60_ek_iar.IAR | IAR | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/printer_basic/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/printer_basic/readme.html#downloading-and-building-the-application"
  },"88": {
    "doc": "Printer Example",
    "title": " Configuring the Hardware",
    "content": "Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED2 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | The CDC USB (UART to USB) interface on this board is served by the DEBUG_USB connector J700. Connecting this to the PC will create a COM port on the PC Host. | . SAM9X60-EK Evaluation Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC connector J4 on the board. | Reset the board by pressing the Push Button SW3. | . | Jumpers J20, J21, and J13 must be open. | Jumper J2 and J3 must be shorted. | Connect the USB Micro-B port J22 on board to the computer using a micro USB cable (to enable the debug com port). The USB COM port interface on this port is used to transfer demonstration application messages to a PC. | Connect the USB Micro-B Connector (J7) on the board to the computer using a micro USB cable. | LED D1 indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | . SAME54 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | The CDC USB (UART to USB) interface on this board is served by the EDBG connector (DEBUG_USB). Connecting this to the PC will create a COM port on the PC Host. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/printer_basic/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/printer_basic/readme.html#-configuring-the-hardware"
  },"89": {
    "doc": "Printer Example",
    "title": "Running the Application",
    "content": "Generic / Text Only driver simply outputs the data to the connected USB printer in raw format without performing any translation on the data to be printed. There is no Printer head mechanism used in this demo, instead, the print data received from the host is sent to the serial terminal application running in the host itself by the demo application. Once the device is successfully installed, open up a terminal program, such as HyperTerminal and select the appropriate COM port. Set the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None . Note: Check the ‘Device Manager’ for the Virtual COM number associated with the EDBG. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/printer_basic/readme.html#running-the-application",
    "relUrl": "/apps/printer_basic/readme.html#running-the-application"
  },"90": {
    "doc": "Printer Example",
    "title": "Installing the printer",
    "content": "The demo board attached to the host PC enumerates as USB Printing Support in Device Manager as shown below. At this point, a new device by the name Generic Text Printer Demo should be available under Control Panel -&gt; Devices and Printers as shown below. ![Control Panel](/usb_apps_device/apps/printer_basic/images/printer_figure_3.png) . Follow the below steps to add Generic/Text Only printer and link it to the attached USB printer. | Open Devices and Printers from the Control Panel and right click then click Add a printer . | In the Add Printer wizard, click Add a local printer. | In the printer port selection option, choose Use an existing port and from the drop-down list, select USB00x (Virtual printer port for USB). | In the printer driver selection, select Generic from the Manufacturer list and Generic / Text Only from the Printers list. | Use the default option in driver version select window and click Next. | In the printer name window, use the default name Generic / Text Only or provide any other name and click Next. | Click Finish to complete the Add printer wizard. | At this point, a new printer icon with the name provided in step #6 should be visible under Devices and Printers window as shown below. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/printer_basic/readme.html#installing-the-printer",
    "relUrl": "/apps/printer_basic/readme.html#installing-the-printer"
  },"91": {
    "doc": "Printer Example",
    "title": "Print test page",
    "content": "After successful installation of the Generic / Text Only printer, follow below steps to print a test page. | On the printer icon, right click and select “Printer Properties” | In the properties window, click “Print Test Page” as shown below. | Now the test page data will be printed on the serial terminal application as shown below. This shows the successful reception of print data sent by the host PC. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/printer_basic/readme.html#print-test-page",
    "relUrl": "/apps/printer_basic/readme.html#print-test-page"
  },"92": {
    "doc": "Printer Example",
    "title": "Printer Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/printer_basic/readme.html",
    "relUrl": "/apps/printer_basic/readme.html"
  },"93": {
    "doc": "USB UART Bridge Dual Channel Example",
    "title": "USB UART Bridge Dual Channel Example (usb_usart_bridge_dual)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support CDC Device Class using a real-world application. It implements a USB-USART Bridge application. ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_dual/readme.html#usb-uart-bridge-dual-channel-example-usb_usart_bridge_dual",
    "relUrl": "/apps/usb_uart_bridge_dual/readme.html#usb-uart-bridge-dual-channel-example-usb_usart_bridge_dual"
  },"94": {
    "doc": "USB UART Bridge Dual Channel Example",
    "title": "Description",
    "content": "This application demonstrates the use of the CDC device class to implement a dual USB-UART bridge. The application enumerates two COM ports on the personal computer. Any data sent through the virtual COM ports will be seen at the respective UART port Tx pin and data sent through the UART Rx pin of the MCU will be seen at the virtual COM port. ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_dual/readme.html#description",
    "relUrl": "/apps/usb_uart_bridge_dual/readme.html#description"
  },"95": {
    "doc": "USB UART Bridge Dual Channel Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/usb_usart_bridge_dual. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAM D21 Xplained Pro board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_dual/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/usb_uart_bridge_dual/readme.html#downloading-and-building-the-application"
  },"96": {
    "doc": "USB UART Bridge Dual Channel Example",
    "title": " Configuring the Hardware",
    "content": "SAM D21 Xplained Pro board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | The pins PA16 and PB08 have to be shorted with PA17 and PB09 respectively. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_dual/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/usb_uart_bridge_dual/readme.html#-configuring-the-hardware"
  },"97": {
    "doc": "USB UART Bridge Dual Channel Example",
    "title": "Running the Application",
    "content": "This demonstration allows the device to appear like two serial (COM) ports to the host. Do the following to run this demonstration: . | Open the project with appropriate IDE. Compile the project and program the target device. | Attach the device to the host. If the host is a personal computer and this is the first time you have plugged this device into the computer, you may be prompted for a .inf file: . | Select the “Install from a list or specific location (Advanced)” option. Specify the ..\\usb_apps_device\\apps\\cdc_usart_bridge_dual\\inf directory. Note: To specifically select the driver, open the device manager and expand the Ports (COM &amp; LPT) tab, and right click on Update Driver Software. Verify that the enumerated USB device is seen as a virtual USB serial comport in Device Manager. | Once the device is successfully installed, open two instances of terminal program, such as HyperTerminal and select the appropriate COM port. Set the serial port settings as follows: . | Baud : 9600 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . Note: The baud rate can different from 9600 but the chosen value has to be the same on both the instances of terminal program. | The LEDs on the demonstration board will indicate the USB state of the device. Refer to the Configuring the Hardware section for the selected board for more details. | To run the demonstration, turn OFF the local echo on both the terminals. For Tera Term terminal application, navigate to Setup-&gt;Terminal to turn OFF local echo. A character or string typed in one terminal window will be displayed on the same terminal as the Rx/Tx pins are shorted. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_dual/readme.html#running-the-application",
    "relUrl": "/apps/usb_uart_bridge_dual/readme.html#running-the-application"
  },"98": {
    "doc": "USB UART Bridge Dual Channel Example",
    "title": "USB UART Bridge Dual Channel Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_dual/readme.html",
    "relUrl": "/apps/usb_uart_bridge_dual/readme.html"
  },"99": {
    "doc": "USB UART Bridge Single Channel Example",
    "title": "USB UART Bridge Single Channel Example (usb_usart_bridge_single)",
    "content": "This application demonstrates the ability of the MPLAB® Harmony USB Device Stack to support the CDC Device Class using a real-world application. It implements a USB-USART Bridge application. ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_single/readme.html#usb-uart-bridge-single-channel-example-usb_usart_bridge_single",
    "relUrl": "/apps/usb_uart_bridge_single/readme.html#usb-uart-bridge-single-channel-example-usb_usart_bridge_single"
  },"100": {
    "doc": "USB UART Bridge Single Channel Example",
    "title": "Description",
    "content": "This application demonstrates the use of the CDC device class to implement a USB-UART bridge. The application enumerates as a COM port on the personal computer. Any data sent through the virtual COM port will be seen at the respective UART port Tx pin and data sent through the UART Rx pin of the MCU will be seen at the virtual COM port. ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_single/readme.html#description",
    "relUrl": "/apps/usb_uart_bridge_single/readme.html#description"
  },"101": {
    "doc": "USB UART Bridge Single Channel Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click the Clone button to clone this repository or download it as a zip file. This content can also be downloaded using the MPLAB® Harmony Content Manager by following these instructions. The path of the application within the repository is usb_apps_device/apps/usb_usart_bridge_single. The following table gives the details of project configurations, target device used, hardware, and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAM D21 Xplained Pro board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAM E54 Xplained Pro Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_single/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/usb_uart_bridge_single/readme.html#downloading-and-building-the-application"
  },"102": {
    "doc": "USB UART Bridge Single Channel Example",
    "title": " Configuring the Hardware",
    "content": "SAM D21 Xplained Pro board . | Use the TARGET USB connector on the board to connect the USB device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Short the pins SERCOM1 USART TX (PA16) and SERCOM1 USART RX (PA17). These pins are available on the connector EXT2 pins 17 and 15 respectively. | . SAM E54 Xplained Pro Board . | Use the TARGET USB connector on the board to connect the USB device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Short the pins SERCOM0 USART TX (PA04) and SERCOM0 USART (PA05). These pins are available on the connector EXT1 pins 14 and 13 respectively. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_single/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/usb_uart_bridge_single/readme.html#-configuring-the-hardware"
  },"103": {
    "doc": "USB UART Bridge Single Channel Example",
    "title": "Running the Application",
    "content": "This demonstration allows the device to appear like a serial (COM) port to the host. Do the following to run this demonstration: . | Open the project with appropriate IDE. Compile the project and program the target device. | Attach the device to the host. If the host is a personal computer and this is the first time you have plugged this device into the computer, you may be prompted for a .inf file: . | Select the “Install from a list or specific location (Advanced)” option. Specify the ..\\usb_apps_device\\apps\\usb_uart_bridge_single\\inf directory. Note: To specifically select the driver, open the device manager and expand the Ports (COM &amp; LPT) tab, and right click on Update Driver Software. Verify that the enumerated USB device is seen as a virtual USB serial comport in Device Manager. | Once the device is successfully installed, open an instance of a serial terminal program, such as HyperTerminal and select the appropriate COM port. Set the serial port settings as follows: . | Baud : 9600 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . Note: The baud rate can different from 9600. | The LEDs on the demonstration board will indicate the USB state of the device. Refer to the Configuring the Hardware section for the selected board for more details. | To run the demonstration, turn OFF the local echo on the serial terminal. For Tera Term terminal application, navigate to Setup-&gt;Terminal to turn OFF local echo. A character or string typed in the terminal window will be displayed on the same terminal as the Rx/Tx pins are shorted. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_single/readme.html#running-the-application",
    "relUrl": "/apps/usb_uart_bridge_single/readme.html#running-the-application"
  },"104": {
    "doc": "USB UART Bridge Single Channel Example",
    "title": "USB UART Bridge Single Channel Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/usb_uart_bridge_single/readme.html",
    "relUrl": "/apps/usb_uart_bridge_single/readme.html"
  },"105": {
    "doc": "Vendor Example",
    "title": "Vendor Example (vendor)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support Vendor Device class. ",
    "url": "http://localhost:4000/usb_apps_device/apps/vendor/readme.html#vendor-example-vendor",
    "relUrl": "/apps/vendor/readme.html#vendor-example-vendor"
  },"106": {
    "doc": "Vendor Example",
    "title": "Description",
    "content": "This application creates a USB CDC Device that enumerates as a custom vendor USB device on the USB host PC. The device uses USB Device Layer Endpoint functions and demonstrates the PC host’s ability to control the LEDs on the board and query the status of a switch through PC utility. ",
    "url": "http://localhost:4000/usb_apps_device/apps/vendor/readme.html#description",
    "relUrl": "/apps/vendor/readme.html#description"
  },"107": {
    "doc": "Vendor Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/vendor. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mz_ef_sk.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | pic32mz_ef_sk_freertos.X | MPLABX | PIC32MZ2048EFH144 | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | pic32mm_usb_curiosity.X | MPLABX | PIC32MM0256GPM064 | PIC32MM USB Curiosity Development Board | . | sam_9x60_ek.X | MPLABX | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_9x60_ek_freertos.X | MPLABX | SAM9X60 | SAM9X60-EK Evaluation Board | . | sam_a5d2_xult.X | MPLABX | ATSAMA5D27C | SAMA5D2 Xplained Ultra Board | . | sam_a5d2_xult_iar.IAR | IAR | ATSAMA5D27C | SAMA5D2 Xplained Ultra Board | . | sam_a5d27_som1_ek.X | MPLABX | ATSAMA5D27C | SAMA5D27 SOM1 Kit1 | . | sam_a5d27_wlsom1_ek1.X | MPLABX | ATSAMA5D27C | ATSAMA5D27 WLSOM1 EK1 | . | sam_a7g5_ek.X | MPLABX | SAMA7G54 | SAMA7G5 EK Board | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAMD21 Xplained Pro Board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro Board | . | sam_e54_xpro_freertos.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro Board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra Board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra Board | . | sam_g55_xpro.X | MPLABX | ATSAMG55J19 | SAMG55 Xplained Pro Board | . | sam_v71_xult.X | MPLABX | ATSAMV71Q21B | SAMV71 Xplained Ultra board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/vendor/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/vendor/readme.html#downloading-and-building-the-application"
  },"108": {
    "doc": "Vendor Example",
    "title": " Configuring the Hardware",
    "content": "SAMD21 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAME54 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAME70 Xplained Ultra Board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . SAMV71 Xplained Ultra board . | Jumper titled “USB VBUS” must be shorted between PC09 and VBUS (positions 2 and 3) | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . SAMG55 Xplained Pro Board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW0 to trigger communication from the USB Device to the USB Host. | . SAM9X60-EK Evaluation Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC connector J4 on the board. | Reset the board by pressing the Push Button SW3. | . | Jumpers J20, J21, and J13 must be open. | Jumper J2 and J3 must be shorted. | Connect the USB Micro-B port J22 on board to the computer using a micro USB cable (to enable the debug com port). | Connect the USB Micro-B Connector (J7) on the board to the computer using a micro USB cable. | LED D1 indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. Note: Reset push button on SAM9X60 EK is labeled as SW3 . | . SAMA5D2 Xplained Ultra Board . | Setup the SD card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) and generated application binary (harmony.bin)into the SD card | Insert the SD card into the SDMMC1 slot on the board | . | Short jumper JP2(DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | Use “A5-USB-A” connector(J23 - Micro A/B connector) on the board to connect the USB Device to the USB Host. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press PB_USER Switch to trigger communication from the USB Device to the USB Host | . Curiosity PIC32MX470 Development Board . | Use the USB micro-B port J12 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED2 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit . | Use the micro-A/B port J4 (which is located on the bottom side of the board) to connect the USB Device to the USB Host PC. | LED2 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch SW1 to trigger communication from the USB Device to the USB Host. | . SAMA5D27 SOM1 Kit1 . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC0 slot (J12) on the board. | Reset the board by pressing the Push Button PB1. | . | Connect the Debug USB port (J10) on the board to the computer using a micro USB cable. | Connect the USB Micro-B Connector (J17) on the board to the computer using a micro USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the pushbutton PB4 to trigger communication from the USB Device to the USB Host. | . ATSAMA5D27-WLSOM1 Evaluation Kit . | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SDMMC0 Card Connector (J9) on the board. | Reset the board by pressing the Reset Button (SW2) | . | Connect the USB-A MicroAB connector (J10) on the board to the computer using a micro USB cable. | Press the “START_SOM” button to activate board start-up. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the pushbutton SW4 to trigger communication from the USB Device to the USB Host. | . PIC32MM USB Curiosity Development Board . | Use the micro-B USB connector USB2 on the board to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | Press the switch S1 to trigger communication from the USB Device to the USB Host. | . SAMA7G5-EK Evaluation Kit . | Powered the board with an external power supply (J1) or power supply the board by connecting J7 to the computer using a micro USB cable. | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SD Card Connector (J4) on the board. | Reset the board by pressing the Reset Button (nRST) | . | Press the “nSTART” button to activate board start-up. | Connect the USB MicroAB connector (J7) to the computer using an USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | Press the USER BUTTON SW1 to trigger communication from the USB Device to the USB Host. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/vendor/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/vendor/readme.html#-configuring-the-hardware"
  },"109": {
    "doc": "Vendor Example",
    "title": "Running the Application",
    "content": "The Vendor device can be exercised by using the WinUSB PnP Demonstration application, which is provided in your installation of MPLAB Harmony. The LEDs on the demonstration board will indicate the USB state of the device. This application allows the state of the LEDs on the board to be toggled and indicates the state of a switch (pressed/released) on the board. Refer to the Configuring the Hardware section for the selected target hardware. To launch the application, open the executable WinUSB_PnP_Demo.exe from the folder path usb_apps_device/apps/vendor/bin/WinUSB_PnP_Demo.exe. A dialog box similar to the following should appear: . The appropriate device family that is under testing should be selected in the utility. Pressing the Toggle LED button will cause the LED on the board to toggle. The Pushbutton State field in the application indicates the state of a button on connected USB Device. Pressing the switch on the development board will update the Pressed/Not Pressed status of the Pushbutton State field. Note: The device family under test should be selected appropriately. An incorrect selection will result in an invalid push button status. Windows Operating system may select a wrong driver by default. If the application does not run as expected it is suggested to look into the Windows Device Manager and see if the Microchip WinUSB Device is not shown with a Yellow mark. If so, the drivers should be selected manually from the application path. Manual selection of Drivers . To specifically select the driver, open the device manager and look for device named as WinUSB Device with a Yellow mark. Right click and select Update Driver Software. Select Browse my computer for drivers. Select the drivers in application path ..\\usb_apps_device\\apps\\vendor\\driver. ",
    "url": "http://localhost:4000/usb_apps_device/apps/vendor/readme.html#running-the-application",
    "relUrl": "/apps/vendor/readme.html#running-the-application"
  },"110": {
    "doc": "Vendor Example",
    "title": "Vendor Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/vendor/readme.html",
    "relUrl": "/apps/vendor/readme.html"
  },"111": {
    "doc": "CDC COM Port Dual Example",
    "title": "CDC COM Port Dual Example (cdc_com_port_dual)",
    "content": "This application demonstrates the ability of the MPLAB Harmony USB Device Stack to support multiple instances of the same device class. It creates a USB CDC Device that enumerates as two serial ports on the USB Host PC. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_dual/readme.html#cdc-com-port-dual-example-cdc_com_port_dual",
    "relUrl": "/apps/cdc_com_port_dual/readme.html#cdc-com-port-dual-example-cdc_com_port_dual"
  },"112": {
    "doc": "CDC COM Port Dual Example",
    "title": "Description",
    "content": "This application is example of a USB CDC Device that enumerates as a dual COM port on the USB host PC. The COM port can be opened using any of the terminal applications. To demonstrate communication between the two COM ports, a character typed in one of the COM port is displayed on the other and vice versa. ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_dual/readme.html#description",
    "relUrl": "/apps/cdc_com_port_dual/readme.html#description"
  },"113": {
    "doc": "CDC COM Port Dual Example",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is usb_apps_device/apps/cdc_com_port_dual. Following table gives the details of project configurations, target device used, hardware and its IDE. Open the project using the respective IDE and build it. | Project Name | IDE | Target Device | Hardware / Configuration | . | sam_d11_xpro.X | MPLABX | ATSAMD11D14A | SAMD11 Xplained Pro board | . | sam_d21_xpro.X | MPLABX | ATSAMD21J18A | SAMD21 Xplained Pro board | . | sam_a7g5_ek.X | MPLABX | SAMA7G54 | SAMA7G5 EK Board | . | sam_e54_xpro.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro board | . | sam_e54_xpro_freertos.X | MPLABX | ATSAME54P20A | SAME54 Xplained Pro board | . | sam_e70_xult.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra board | . | sam_e70_xult_freertos.X | MPLABX | ATSAME70Q21B | SAME70 Xplained Ultra board | . | sam_v71_xult.X | MPLABX | ATSAMV71Q21B | SAMV71 Xplained Ultra board | . | sam_v71_xult_freertos.X | MPLABX | ATSAMV71Q21B | SAMV71 Xplained Ultra board | . | pic32mz_ef_curiosity_2_0.X | MPLABX | PIC32MZ2048EFM144 | Curiosity PIC32MZ EF 2.0 Development Board | . | pic32mx470_curiosity.X | MPLABX | PIC32MX470F512H | PIC32MX Curiosity Development Board | . | pic32mm_usb_curiosity.X | MPLABX | PIC32MM0256GPM064 | PIC32MM USB Curiosity Development Board | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_dual/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/cdc_com_port_dual/readme.html#downloading-and-building-the-application"
  },"114": {
    "doc": "CDC COM Port Dual Example",
    "title": " Configuring the Hardware",
    "content": "SAMD11 Xplained Pro board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . SAMD21 Xplained Pro board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . SAME54 Xplained Pro board . | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . SAME70 Xplained Ultra board . | Jumper J203 must be shorted between PB08 and VBUS (positions 2 and 3). | Use TARGET USB J200 connector on the board to connect the USB Device to the USB Host PC. | LED3 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . SAMV71 Xplained Ultra board . | Jumper titled “USB VBUS” must be shorted between PC09 and VBUS (positions 2 and 3) | Use TARGET USB connector on the board to connect the USB Device to the USB Host PC. | LED0 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . Curiosity PIC32MZ EF 2.0 Development Board . | Use the USB micro-B port J201 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . Curiosity PIC32MX470 Development Board . | Use the USB micro-B port J12 to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . PIC32MM USB Curiosity Development Board . | Use the micro-B USB connector USB2 on the board to connect the USB Device to the USB Host PC. | LED1 indicates USB Device Configuration Set Complete event (the USB device functionality has been activated by the USB Host). | . SAMA7G5-EK Evaluation Kit . | Powered the board with an external power supply (J1) or power supply the board by connecting J7 to the computer using a micro USB cable. | Setup the SD card . | Download harmony MPU bootstrap loader from this location. | Copy the downloaded boot loader binary (boot.bin) and generated application binary (harmony.bin) into the SD card. | Insert the SD card into the SD Card Connector (J4) on the board. | Reset the board by pressing the Reset Button (nRST) | . | Press the “nSTART” button to activate board start-up. | Connect the USB MicroAB connector (J7) to the computer using an USB cable. | RGB LED turning to Green indicates USB Device Configuration Set Complete event (The USB device functionality has been activated by the USB Host). | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_dual/readme.html#-configuring-the-hardware",
    "relUrl": "/apps/cdc_com_port_dual/readme.html#-configuring-the-hardware"
  },"115": {
    "doc": "CDC COM Port Dual Example",
    "title": "Running the Application",
    "content": "This demonstration creates a USB device that enumerates as two serial (COM) ports on the host. Do the following to run this demonstration: . | Open the project with appropriate IDE. Compile the project and program the target device. | Attach the device to the host. If the host is a personal computer and this is the first time you have plugged this device into the computer you may be prompted for a .inf file. | Select the “Install from a list or specific location (Advanced)” option. Navigate to the driver path available in the repo - ..\\usb_apps_device\\apps\\cdc_com_port_dual\\inf. Note: To specifically select the driver, open the Device Manager and expand the Ports (COM &amp; LPT) tab, and right click on Update Driver Software. Verify that the enumerated USB device is seen as a virtual USB serial comport in Device Manager. NOTE: The LEDs on the demonstration board will indicate the USB state of the device. Refer to the Configuring the Hardware section for the selected target hardware. | Once the device is successfully installed and visible on the Device Manager, open two instances of terminal program, such as HyperTerminal and select the appropriate COM port. Set the serial port settings as follows: . | Baud : 9600 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . Note: The baud rate can be different from 9600 but the chosen value has to be the same on both the instances of terminal program. | To run the demonstration, turn on local echo on both the terminals. If the terminal application is Tera Term, navigate to Setup-&gt;Terminal to turn on local echo. Type a character or string in one terminal window. The same character or string shall appear on the second terminal window and vice versa. The following screen shot shows two instances of Tera Term. Note: Some terminal programs, like HyperTerminal, require users to click the disconnect button before removing the device from the computer. Failing to do so may result in having to close and open the program again to reconnect to the device. | . ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_dual/readme.html#running-the-application",
    "relUrl": "/apps/cdc_com_port_dual/readme.html#running-the-application"
  },"116": {
    "doc": "CDC COM Port Dual Example",
    "title": "CDC COM Port Dual Example",
    "content": ". ",
    "url": "http://localhost:4000/usb_apps_device/apps/cdc_com_port_dual/readme.html",
    "relUrl": "/apps/cdc_com_port_dual/readme.html"
  },"117": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": "![Microchip logo](https://raw.githubusercontent.com/wiki/Microchip-MPLAB-Harmony/Microchip-MPLAB-Harmony.github.io/images/microchip_logo.png) ![Harmony logo small](https://raw.githubusercontent.com/wiki/Microchip-MPLAB-Harmony/Microchip-MPLAB-Harmony.github.io/images/microchip_mplab_harmony_logo_small.png) # Microchip MPLAB® Harmony 3 Release Notes ## Harmony 3 USB Device application examples v3.3.0 ### Development kit and demo application support The following table provides the number of USB Device examples available for various development kits. | Development Kits | MPLAB X Applications | IAR Applications | ----------------- | ------------------- | ---------------- | [PIC32MM USB Curiosity Development Board](https://www.microchip.com/en-us/development-tool/dm320107) | 5 | 0 | [Curiosity PIC32MZ EF 2.0 Development Board](https://www.microchip.com/Developmenttools/ProductDetails/DM320209) | 15 | 0 | [Curiosity PIC32MX470 Development Board](https://www.microchip.com/Developmenttools/ProductDetails/dm320103) | 14 | 0 | [PIC32MK General Purpose (GP) Development Board](https://www.microchip.com/developmenttools/ProductDetails/dm320106) | 2 | 0 | [PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit](https://www.microchip.com/DevelopmentTools/ProductDetails/DM320010-C) | 1 | 0 | [PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit](https://www.microchip.com/Developmenttools/ProductDetails/DM320007) | 8 | 0 | [Curiosity PIC32MZ W1 Development Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320104) | 1 | 0 | [SAMD11 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/atsamd11-xpro) | 4 | 1 | [SAMD21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/atsamd21-xpro) | 9 | 1 | [SAMDA1 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAMDA1-XPRO) | 1 | 0 | [SAME54 Xplained Pro Board](https://www.microchip.com/developmenttools/productdetails/atsame54-xpro) | 16 | 1 | [SAME70 Xplained Ultra board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320113) | 19 | 1 | [SAMG55 Xplained Pro Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/ATSAMG55-XPRO) | 3 | 0 | [SAML21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML21-XPRO-B) | 2 | 0 | [SAML22 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML22-XPRO-B) | 1 | 0 | [SAMV71 Xplained Ultra board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/ATSAMV71-XULT) | 3 | 0 | [SAM9X60-EK Evaluation Board](https://www.microchip.com/developmenttools/ProductDetails/DT100126) | 8 | 5 | [SAMA5D2 Xplained Ultra Board](https://www.microchip.com/Developmenttools/ProductDetails/ATSAMA5D2C-XULT) | 7 | 3 | [SAMA5D27 SOM1 Kit1](https://www.microchip.com/developmenttools/ProductDetails/atsama5d27-som1-ek1) | 7 | 0 | [ATSAMA5D27-WLSOM1 Evaluation Kit](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320117) | 7 | 0 | ### New Features and Enhancements - Added MPLAB® Code Configurator (MCC) configurations for all demonstration configurations. - Updated CDC and WinUSB Driver packages. - The following USB Device demonstration applications are added for [SAM9X60-EK Evaluation Board](https://www.microchip.com/developmenttools/ProductDetails/DT100126) - CDC MSD SD Card Example (cdc_msd_sdcard) - The following USB Device demonstration applications are added for [SAMA5D2 Xplained Ultra Board](https://www.microchip.com/Developmenttools/ProductDetails/ATSAMA5D2C-XULT) - CDC MSD SD Card Example (cdc_msd_sdcard) - Vendor Example (vendor) - The following USB Device demonstration applications are added for [SAMA5D27 SOM1 Kit1](https://www.microchip.com/developmenttools/ProductDetails/atsama5d27-som1-ek1) - CDC MSD SD Card Example (cdc_msd_sdcard) - Vendor Example (vendor) - The following USB Device demonstration applications are added for [ATSAMA5D27-WLSOM1 Evaluation Kit](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320117) - CDC MSD SD Card Example (cdc_msd_sdcard) - Vendor Example (vendor) ### Bug fixes - Resolved an issue with the USB Device CDC application initialization function. ### Known Issues - Harmony USB applications for MPUs do not work with XC32 v4.00. All Harmony USB applications for MPUs should be built with XC32 v3.01. ### Development Tools - [MPLAB® X IDE v6.00](https://www.microchip.com/mplab/mplab-x-ide) - [MPLAB® XC32 C/C++ Compiler v4.00](https://www.microchip.com/mplab/compilers) - [IAR Embedded Workbench® for ARM® v8.5](https://www.iar.com/iar-embedded-workbench/#!?architecture=Arm) - MPLAB® X IDE plug-ins:- MPLAB® Code Configurator (MCC) v5.1.1 or above. ## Harmony 3 USB Device application examples v3.2.0 ### Development kit and demo application support Following table provides number of USB Device examples available for different development kits. | Development Kits | MPLAB X Applications | IAR Applications | ----------------- | ------------------- | ---------------- | [PIC32MM USB Curiosity Development Board](https://www.microchip.com/en-us/development-tool/dm320107) | 5 | 0 | [Curiosity PIC32MZ EF 2.0 Development Board](https://www.microchip.com/Developmenttools/ProductDetails/DM320209) | 15 | 0 | [Curiosity PIC32MX470 Development Board](https://www.microchip.com/Developmenttools/ProductDetails/dm320103) | 14 | 0 | [PIC32MK General Purpose (GP) Development Board](https://www.microchip.com/developmenttools/ProductDetails/dm320106) | 2 | 0 | [PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit](https://www.microchip.com/DevelopmentTools/ProductDetails/DM320010-C) | 1 | 0 | [PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit](https://www.microchip.com/Developmenttools/ProductDetails/DM320007) | 8 | 0 | [Curiosity PIC32MZ W1 Development Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320104) | 1 | 0 | [SAMD11 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/atsamd11-xpro) | 4 | 1 | [SAMD21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/atsamd21-xpro) | 9 | 1 | [SAMDA1 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAMDA1-XPRO) | 1 | 0 | [SAME54 Xplained Pro Board](https://www.microchip.com/developmenttools/productdetails/atsame54-xpro) | 16 | 1 | [SAME70 Xplained Ultra board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320113) | 19 | 1 | [SAMG55 Xplained Pro Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/ATSAMG55-XPRO) | 3 | 0 | [SAML21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML21-XPRO-B) | 2 | 0 | [SAML22 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML22-XPRO-B) | 1 | 0 | [SAMV71 Xplained Ultra board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/ATSAMV71-XULT) | 3 | 0 | [SAM9X60-EK Evaluation Board](https://www.microchip.com/developmenttools/ProductDetails/DT100126) | 7 | 5 | [SAMA5D2 Xplained Ultra Board](https://www.microchip.com/Developmenttools/ProductDetails/ATSAMA5D2C-XULT) | 5 | 3 | [SAMA5D27 SOM1 Kit1](https://www.microchip.com/developmenttools/ProductDetails/atsama5d27-som1-ek1) | 5 | 0 | [ATSAMA5D27-WLSOM1 Evaluation Kit](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320117) | 5 | 0 | ### New Features and Enhancements - The following USB Device demonstration applications are added for [PIC32MM USB Curiosity Development Board](https://www.microchip.com/en-us/development-tool/dm320107) - CDC COM Port Single Example (cdc_com_port_single) - CDC COM Port Dual Example (cdc_com_port_dual) - HID Basic demo (hid_basic_remote_wakeup) - MSD Basic Example (msd_basic) - Vendor Example (vendor) - Added USB Device HID Basic Remote Wakeup Example (hid_basic_remote_wakeup) conifiguration for [SAML21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML21-XPRO-B) ### Bug fixes - [MPLAB® Discover portal](https://mplab-discover.microchip.com/) metadata for all demonstration application configurations has been updated. - Updated the USB Device HID Basic Remote Wakeup application. - Updated the CDC COM Port Dual Example application to return the correct number of bytes to the Host. ### Known Issues - None ### Development Tools - [MPLAB® X IDE v5.50](https://www.microchip.com/mplab/mplab-x-ide) - [MPLAB® XC32 C/C++ Compiler v3.00](https://www.microchip.com/mplab/compilers) - [IAR Embedded Workbench® for ARM® v8.5](https://www.iar.com/iar-embedded-workbench/#!?architecture=Arm) - MPLAB® X IDE plug-ins:- MPLAB® Harmony 3 Launcher v3.6.4 or above ## Harmony 3 USB Device application examples v3.1.1 ### Bug fixes - [MPLAB® Discover portal](https://mplab-discover.microchip.com/) metadata for all demonstration application configurations have been updated. ### New Features and Enhancements - None ### Known Issues - None ### Development Tools - Same as v3.1.0 ## Harmony 3 USB Device application examples v3.1.0 ### Development kit and demo application support Following table provides number of USB Device examples available for different development kits. | Development Kits | MPLABx applications | IAR applications | ----------------- | ------------------- | ---------------- | [Curiosity PIC32MZ EF 2.0 Development Board](https://www.microchip.com/Developmenttools/ProductDetails/DM320209) | 15 | 0 | [Curiosity PIC32MX470 Development Board](https://www.microchip.com/Developmenttools/ProductDetails/dm320103) | 14 | 0 | [PIC32MK General Purpose (GP) Development Board](https://www.microchip.com/developmenttools/ProductDetails/dm320106) | 2 | 0 | [PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit](https://www.microchip.com/DevelopmentTools/ProductDetails/DM320010-C) | 1 | 0 | [PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit](https://www.microchip.com/Developmenttools/ProductDetails/DM320007) | 8 | 0 | [Curiosity PIC32MZ W1 Development Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320104) | 1 | 0 | [SAMD11 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/atsamd11-xpro) | 4 | 1 | [SAMD21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/atsamd21-xpro) | 9 | 1 | [SAMDA1 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAMDA1-XPRO) | 1 | 0 | [SAME54 Xplained Pro Board](https://www.microchip.com/developmenttools/productdetails/atsame54-xpro) | 16 | 1 | [SAME70 Xplained Ultra board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320113) | 19 | 1 | [SAMG55 Xplained Pro Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/ATSAMG55-XPRO) | 3 | 0 | [SAML21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML21-XPRO-B) | 1 | 0 | [SAML22 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML22-XPRO-B) | 1 | 0 | [SAMV71 Xplained Ultra board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/ATSAMV71-XULT) | 3 | 0 | [SAM9X60-EK Evaluation Board](https://www.microchip.com/developmenttools/ProductDetails/DT100126) | 7 | 5 | [SAMA5D2 Xplained Ultra Board](https://www.microchip.com/Developmenttools/ProductDetails/ATSAMA5D2C-XULT) | 5 | 3 | [SAMA5D27 SOM1 Kit1](https://www.microchip.com/developmenttools/ProductDetails/atsama5d27-som1-ek1) | 5 | 0 | [ATSAMA5D27-WLSOM1 Evaluation Kit](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320117) | 5 | 0 | ### New Features - The following USB Device demonstration applications are added. - HID Basic Remote Wakeup Example (hid_basic_remote_wakeup) - USB-UART Bridge Single Channel Example (usb_uart_bridge_single) - MSD Multiple LUN Example (msd_multiple_luns) - CDC Serial Emulator MSD Example (cdc_serial_emulator_msd) - MPLAB® X IDE USB Device demonstration application configurations has been added for following development boards. - [Curiosity PIC32MZ EF 2.0 Development Board](https://www.microchip.com/Developmenttools/ProductDetails/DM320209) - [Curiosity PIC32MX470 Development Board](https://www.microchip.com/Developmenttools/ProductDetails/dm320103) - [SAM9X60-EK Evaluation Board](https://www.microchip.com/developmenttools/ProductDetails/DT100126) - [SAMA5D2 Xplained Ultra Board](https://www.microchip.com/Developmenttools/ProductDetails/ATSAMA5D2C-XULT) - [SAMA5D27 SOM1 Kit1](https://www.microchip.com/developmenttools/ProductDetails/atsama5d27-som1-ek1) - [ATSAMA5D27-WLSOM1 Evaluation Kit](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320117) ### Bug fixes - USB Device applications are updated to switch off the LED when the USB is suspended. - Resolved switch debounce issue with USB device applications. ### Known Issues - None ### Development Tools - [MPLAB® X IDE v5.50](https://www.microchip.com/mplab/mplab-x-ide) - [MPLAB® XC32 C/C++ Compiler v3.00](https://www.microchip.com/mplab/compilers) - [IAR Embedded Workbench® for ARM® v8.5](https://www.iar.com/iar-embedded-workbench/#!?architecture=Arm) - MPLAB® X IDE plug-ins:- MPLAB® Harmony 3 Launcher v3.6.4 or above ## Harmony 3 USB Device application examples v3.0.1 ### New Features - None ### Bug fixes - Updated MPLAB® Harmony 3 framework relative path for all MPLABX projects. - Removed the compiler switch -Winline for all MPLABX projects. - USB buffers are word-aligned for ATSAMD21/D11 demos. - Resolved array out of the bound issue with CDC FreeRTOS application. ### Known Issues - None ### Development Tools - [MPLAB® X IDE v5.45](https://www.microchip.com/mplab/mplab-x-ide) - [MPLAB® XC32 C/C++ Compiler v3.00](https://www.microchip.com/mplab/compilers) - [IAR Embedded Workbench® for ARM® v8.5](https://www.iar.com/iar-embedded-workbench/#!?architecture=Arm) - MPLAB® X IDE plug-ins:- MPLAB® Harmony 3 Launcher v3.6.4 or above ## Harmony 3 USB Device application examples v3.0.0 - Applications migrated from the USB repository to this new application repository for USB Device examples. ### Development kit and demo application support Following table provides number of USB Device examples available for different development kits. | Development Kits | MPLABx applications | IAR applications | ----------------- | ------------------- | ---------------- | [PIC32MK General Purpose (GP) Development Board](https://www.microchip.com/developmenttools/ProductDetails/dm320106) | 2 | 0 | [PIC32MX Curiosity Development Board](https://www.microchip.com/Developmenttools/ProductDetails/dm320103) | 2 | 0 | [PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit](https://www.microchip.com/DevelopmentTools/ProductDetails/DM320010-C) | 1 | 0 | [Curiosity PIC32MZ EF 2.0 Development Board](https://www.microchip.com/Developmenttools/ProductDetails/DM320209) | 1 | 0 | [PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit](https://www.microchip.com/Developmenttools/ProductDetails/DM320007) | 8 | 0 | [Curiosity PIC32MZ W1 Development Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320104) | 1 | 0 | [SAM9X60-EK Evaluation Board](https://www.microchip.com/developmenttools/ProductDetails/DT100126) | 0 | 4 | [SAM A5D2 Xplained Ultra Board](https://www.microchip.com/Developmenttools/ProductDetails/ATSAMA5D2C-XULT) | 0 | 3 | [SAM D11 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/atsamd11-xpro) | 4 | 1 | [SAM D21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/atsamd21-xpro) | 9 | 1 | [SAM DA1 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAMDA1-XPRO) | 1 | 0 | [SAM E54 Xplained Pro Board](https://www.microchip.com/developmenttools/productdetails/atsame54-xpro) | 14 | 1 | [SAM E70 Xplained Ultra Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/DM320113) | 19 | 1 | [SAMG55 Xplained Pro Board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/ATSAMG55-XPRO) | 3 | 0 | [SAM L21 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML21-XPRO-B) | 1 | 0 | [SAM L22 Xplained Pro Board](https://www.microchip.com/developmenttools/ProductDetails/PartNO/ATSAML22-XPRO-B) | 1 | 0 | [SAM V71 Xplained Ultra board](https://www.microchip.com/DevelopmentTools/ProductDetails/PartNO/ATSAMV71-XULT) | 3 | 0 | ### New Features New features added in this release are as follows: - Applications migrated from the USB repository to this new application repository for USB Device examples. ### Known Issues The current known issues are as follows: - None ### Development Tools - [MPLAB® X IDE v5.45](https://www.microchip.com/mplab/mplab-x-ide) - MPLAB® X IDE plug-ins: - MPLAB® Harmony Configurator (MHC) v3.6.0 - [MPLAB® XC32 C/C++ Compiler v2.50](https://www.microchip.com/mplab/compilers) - [KEIL MDK v5.30 or above](https://www2.keil.com/mdk5) - [IAR Embedded workbench for ARM v8.50 or above](https://www.iar.com/iar-embedded-workbench/#!?architecture=Arm) ",
    "url": "http://localhost:4000/usb_apps_device/release_notes.html",
    "relUrl": "/release_notes.html"
  },"118": {
    "doc": "Harmony 3 USB Device application examples",
    "title": "Harmony 3 USB Device application examples",
    "content": "[![MCHP](https://www.microchip.com/ResourcePackages/Microchip/assets/dist/images/logo.png)](https://www.microchip.com) # Harmony 3 USB Device application examples MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 USB Device application examples. - [Release Notes](/usb_apps_device/release_notes.html) - [MPLAB® Harmony License](/usb_apps_device/mplab_harmony_license.html) To clone or download these applications from Github, go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/usb_apps_device) and then click **Clone** button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these [instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki). # Contents Summary | Folder | Description | --- | --- | apps | Contains Harmony 3 USB Device application examples | docs | Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine). Use [github pages](https://microchip-mplab-harmony.github.io/usb_apps_device/) of this repository for viewing it online. | ## Code Examples The following applications are provided to demonstrate the typical or interesting usage models of USB Device capabilities. | Name | Description | --------------------- | ----------------------------- | CDC COM Port Dual | The application is example of a USB CDC Device that enumerates as a dual COM port on the USB host PC. The COM port can be opened using any of the terminal applications. To demonstrate communication between the two COM ports, a character typed in one of the COM port is displayed on the other and vice versa. | CDC COM Port Single | The application creates a USB CDC Device that enumerates as a single COM port on the USB host PC. The COM port can be opened using any of the terminal applications. To demonstrate two-way communication, when a character is typed on the terminal window, it is echoed back by the USB device. | CDC MSD Basic | The application creates a USB CDC Device that enumerates as a COM port and Flash Drive simultaneously. The COM port can be opened using any of the terminal applications and to demonstrate two-way communication, a character typed on the terminal window is echoed back by the USB device. Flash drive acts similar to any Mass Storage Class device where the NVM is used as storage media. | CDC MSD SD Card | The application creates a USB CDC Device that enumerates as a COM port and Flash Drive simultaneously. The COM port can be opened using any of the terminal applications and to demonstrate two-way communication, a character typed on the terminal window is echoed back by the USB device. Flash drive acts similar to any Mass Storage Class device where the SD Card is used as storage media. | CDC Serial Emulator | The application demonstrates the use of the CDC device class to implement a USB-to-Serial Converter. TThe application enumerates a COM port on the personal computer. Data received through the CDC USB interface is forwarded to a UART. Data received on the UART is forwarded to the CDC USB interface on the target board. The interface between the UART and the CDC USB Interface on the board demonstrates the USB to UART capability. | HID Basic | The application creates a USB HID Device that enumerates as a custom USB HID device on the USB host PC. The device allows the USB Host utility to control the LEDs on the board and query the status of a switch. | HID Joystick | The application creates a custom HID joystick. The application is only intended to demonstrate creation of Joystick HID Report descriptors and may not be a definite end solution. The end application requirements may need the report descriptor to be modified. | HID Keyboard | The application creates a Generic HID keyboard. Pressing a switch on the target board emulates a keyboard key press. | HID Mouse | The application creates a USB HID based two-button mouse device. When connected, the device emulates mouse operation by moving the cursor in a circular pattern. When the button in USB device is pressed the movement of cursor is Stopped/Started again. | HID MSD Basic | The application creates a USB Device that combines the functionality of the hid_basic and msd_basic demonstration applications. To demonstrate HID functionality, the device allows USB Host utility to control the LEDs on the board and query the status of a switch. To demonstrate MSD functionality, application allows read / write / modify / delete data from a PC host like any normal Flash drive. | MSD Basic | The application creates a USB MSD Device that enumerates as a Flash Drive on the USB host PC. The application allows read / write / modify / delete data from a PC host like any normal Flash drive. | MSD SD Card | The application creates a USB MSD Device that enumerates as a Flash Drive on the USB host PC. The application allows read / write / modify / delete data from a PC host like any normal Flash drive. | Printer | This demo uses PC running Windows 7 as a USB Host. The demo board programmed with the demo application, enumerates as \"USB Printing Support\" device when connected to the USB Host. This demo allows the user to print the text from Notepad or similar application in Windows using built in **Generic/Text Only** print driver. | USB UART Bridge Dual | The application demonstrates the use of the CDC device class to implement a dual USB-UART bridge. The application enumerates two COM ports on the personal computer. Any data sent through the virtual COM ports will be seen at the respective UART port Tx pin and data sent through the UART Rx pin of the MCU will be seen at the virtual COM port. | USB UART Bridge Single | The application demonstrates the use of the CDC device class to implement a USB-UART bridge. The application enumerates a COM port on the personal computer. Any data sent through the virtual COM port will be seen at the respective UART port Tx pin and data sent through the UART Rx pin of the MCU will be seen at the virtual COM port. | Vendor | The application creates a USB CDC Device that enumerates as a custom vendor USB device on the USB host PC. The device uses USB Device Layer Endpoint functions and demonstrates the PC host's ability to control the LEDs on the board and query the status of a switch through PC utility. | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/usb_apps_device/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/usb_apps_device.svg)](https://github.com/Microchip-MPLAB-Harmony/usb_apps_device/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/usb_apps_device.svg)](https://github.com/Microchip-MPLAB-Harmony/usb_apps_device/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/usb_apps_device.svg)](https://github.com/Microchip-MPLAB-Harmony/usb_apps_device/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/usb_apps_device.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/usb_apps_device.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/usb_apps_device.svg?style=social)]() ",
    "url": "http://localhost:4000/usb_apps_device/",
    "relUrl": "/"
  }
}
